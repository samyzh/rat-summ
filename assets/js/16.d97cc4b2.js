(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{1273:function(s,e,a){s.exports=a.p+"assets/img/1607868531618-501df8c9-f838-4bee-9b7c-5b7c37dabe09.0296b224.png"},1274:function(s,e,a){s.exports=a.p+"assets/img/1607868587551-b57afcdf-e68e-427e-b329-8e54fe26a751.dbe26390.png"},1275:function(s,e,a){s.exports=a.p+"assets/img/1593363605776-bb1dedd8-1d5a-4c77-aa8e-e812e3d9b1f7.243fb9e3.png"},1276:function(s,e,a){s.exports=a.p+"assets/img/1593364128432-557513a7-4df2-411d-a619-1d616fec9556.a7cdeb12.png"},1277:function(s,e,a){s.exports=a.p+"assets/img/1593364227255-420b6592-b5c1-4c30-a225-73fad69646a4.7e05ef41.png"},1278:function(s,e,a){s.exports=a.p+"assets/img/1593364941676-71119626-0ef6-43e4-95e4-0f9fb1a1d9b1.e8201c92.png"},1279:function(s,e,a){s.exports=a.p+"assets/img/1607870847452-b2ada36f-e3fb-4a81-84a7-426e0361718f.0c4f3e05.png"},1280:function(s,e,a){s.exports=a.p+"assets/img/1607869133163-2098739e-af79-42d9-a486-7fd953889918.7897d83a.png"},1281:function(s,e,a){s.exports=a.p+"assets/img/1607871226480-42d5bd1f-b4b5-408b-843d-8e1925f2ee12.9ac75e45.png"},1282:function(s,e,a){s.exports=a.p+"assets/img/1607871537314-47d7699a-b750-431b-8ec9-f47210009a17.7ea9793c.png"},1283:function(s,e,a){s.exports=a.p+"assets/img/1607876145566-9880f026-441f-4b0a-bc74-bea49e16b3fa.5154ebdb.png"},1284:function(s,e,a){s.exports=a.p+"assets/img/1607877288209-ce8ea750-1fdd-4d56-a51d-2bb884d5408b.1cf6a02b.png"},1285:function(s,e,a){s.exports=a.p+"assets/img/1607877391940-ec378f31-d00c-4951-804a-f760dbe5bf57.50e43fab.png"},1286:function(s,e,a){s.exports=a.p+"assets/img/1607877504675-1467b625-dd8c-4f3a-bdbe-358d3e2cbe05.797670db.png"},1287:function(s,e,a){s.exports=a.p+"assets/img/1607877644296-335adf4f-9dfc-42b7-9481-90cf9948bbe2.439c6a1e.png"},1288:function(s,e,a){s.exports=a.p+"assets/img/1593443106637-6a545230-ac4a-45d5-b865-4af2b82bf616.c58318e5.png"},1289:function(s,e,a){s.exports=a.p+"assets/img/1593443208168-31804226-b16c-431b-9faa-0a1a46eef338.92514dde.png"},2090:function(s,e,a){"use strict";a.r(e);var t=a(14),n=Object(t.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"什么是镜像库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是镜像库"}},[s._v("#")]),s._v(" 什么是镜像库")]),s._v(" "),t("p",[s._v("字面意思，镜像库就是集中存放镜像的一个文件服务。镜像库在 "),t("code",[s._v("CI/CD")]),s._v(" 中，又称 "),t("code",[s._v("制品库")]),s._v(" 。构建后的产物称为"),t("strong",[s._v("制品")]),s._v("，制品则要放到"),t("strong",[s._v("制品库")]),s._v("做"),t("strong",[s._v("中转和版本管理")]),s._v("。常用平台有"),t("strong",[s._v("Nexus，Jfrog，Harbor")]),s._v("或其他对象存储平台。")]),s._v(" "),t("p",[s._v("在这里，我们选用 "),t("code",[s._v("Nexus3")]),s._v(" 作为自己的镜像库。因为其稳定，性能好，免费，部署方便，且支持类型多，是许多制品库的首选选型。")]),s._v(" "),t("h2",{attrs:{id:"部署-nexus-服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#部署-nexus-服务"}},[s._v("#")]),s._v(" 部署 Nexus 服务")]),s._v(" "),t("p",[s._v("在部署 "),t("code",[s._v("Nexus")]),s._v(" 之前，需要先下载 "),t("code",[s._v("Nexus")]),s._v(" 的安装包（这里需要另外找个托管服务）")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("wget")]),s._v(" https://dependency-fe.oss-cn-beijing.aliyuncs.com/nexus-3.29.0-02-unix.tar.gz\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("下载完成后，解压安装包")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tar")]),s._v(" -zxvf ./nexus-3.29.0-02-unix.tar.gz\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("解压后，我们可以看到有2个文件夹。分别是 "),t("code",[s._v("nexus-3.29.0-02")]),s._v(" 和 "),t("code",[s._v("sonatype-work")]),s._v(" 。其中，"),t("code",[s._v("nexus-3.29.0-02")]),s._v(" 是nexus主程序文件夹，"),t("code",[s._v("sonatype-work")]),s._v(" 则是数据文件。")]),s._v(" "),t("h2",{attrs:{id:"启动-nexus"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动-nexus"}},[s._v("#")]),s._v(" 启动 Nexus")]),s._v(" "),t("p",[s._v("我们进入 "),t("code",[s._v("nexus-3.29.0-02")]),s._v(" 下面的 "),t("code",[s._v("bin")]),s._v(" 目录，这里就是 "),t("code",[s._v("nexus")]),s._v(" 的主命令目录。我们在 "),t("code",[s._v("bin")]),s._v(" 目录下，执行 "),t("code",[s._v("./nexus start")]),s._v(" 命令即可启动 "),t("code",[s._v("nexus")]),s._v(" ：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("./nexus start\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("blockquote",[t("p",[s._v("nexus 还支持停止，重启等命令。可以在 bin 目录下执行 ./nexus help 查看更多命令")])]),s._v(" "),t("p",[s._v("由于 "),t("code",[s._v("nexus")]),s._v(" 默认服务端口是 "),t("code",[s._v("8081")]),s._v("，稍后我们还需要给镜像库访问单独开放一个 "),t("code",[s._v("8082")]),s._v(" 端口。这里将 "),t("code",[s._v("8081")]),s._v("，"),t("code",[s._v("8082")]),s._v(" 端口添加到防火墙放行规则内（没开防火墙则可以略过）：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("firewall-cmd --zone"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("public --add-port"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8081")]),s._v("/tcp --permanent\nfirewall-cmd --zone"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("public --add-port"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8082")]),s._v("/tcp --permanent\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("打开浏览器地址栏，访问 "),t("code",[s._v("IP:8081")]),s._v(" 。启动时间比较长，需要耐心等待。在 "),t("code",[s._v("Nexus")]),s._v(" 启动后，会进入这个欢迎页面：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(1273),alt:"image.png"}})]),s._v(" "),t("h2",{attrs:{id:"配置-nexus"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置-nexus"}},[s._v("#")]),s._v(" 配置 Nexus")]),s._v(" "),t("p",[s._v("进入欢迎页后，点击右上角的登录，会打开登录框。这里需要我们输入 "),t("code",[s._v("默认管理员密码")]),s._v(" 进行初始化配置。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(1274),alt:"image.png"}})]),s._v(" "),t("p",[s._v("可以在这里找到：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /opt/nexus/sonatype-work/nexus3/admin.password\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 0ee35fa5-d773-432b-8e76-6c10c940ccd9")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("将文件中获取到的密码输入进去，登录用户名是 "),t("code",[s._v("admin")]),s._v(" 。")]),s._v(" "),t("p",[s._v("接着是修改新密码。修改后，会进入下图这一步。这一步的意思是"),t("strong",[s._v("是否开启匿名访问")]),s._v("。匿名访问是指：**我们在没有登录的情况下，拉取（推送）制品到制品库，都算匿名访问。**这是个很便捷，也是个危险的行为。"),t("img",{attrs:{src:a(1275),alt:"image.png"}})]),s._v(" "),t("p",[s._v("例如，这个制品库也支持 "),t("code",[s._v("node")]),s._v(" 的 "),t("code",[s._v("npm")]),s._v(" 私有库。那么我们在没有 "),t("code",[s._v("npm login")]),s._v(" 登录这个制品库之前，就可以进行 "),t("code",[s._v("npm install")]),s._v(" "),t("code",[s._v("npm publish")]),s._v("，其实是不太安全的。那么任何一个知道制品库地址的人，都可以任意进行推送和获取资源。")]),s._v(" "),t("p",[s._v("这里我们为了测试，可以先允许开启匿名访问。选择 "),t("code",[s._v("Enable anonymous access")]),s._v("  ，点击下一步。")]),s._v(" "),t("h2",{attrs:{id:"创建一个-docker-私服"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建一个-docker-私服"}},[s._v("#")]),s._v(" 创建一个 Docker 私服")]),s._v(" "),t("p",[s._v("登录完成后，点击页面头部导航栏的"),t("strong",[s._v("齿轮")]),s._v("图标，选择左侧菜单中的 "),t("code",[s._v("Repositories")]),s._v(" ，点击 "),t("code",[s._v("Create repository")]),s._v(" 。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(1276),alt:"image.png"}})]),s._v(" "),t("p",[s._v("点击后，我们可以看到一个列表，这就是 "),t("code",[s._v("Nexus")]),s._v(" 所支持的制品库类型。其中有我们要使用的 "),t("code",[s._v("Docker")]),s._v(" ，也有我们熟悉的 "),t("code",[s._v("Npm")]),s._v(" 。我们在里面找到 "),t("code",[s._v("Docker")]),s._v(" ：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(1277),alt:"image.png"}})]),s._v(" "),t("p",[s._v("但是 "),t("code",[s._v("Docker")]),s._v(" 有三种，该选哪个呢？")]),s._v(" "),t("h3",{attrs:{id:"选择制品库的类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#选择制品库的类型"}},[s._v("#")]),s._v(" 选择制品库的类型")]),s._v(" "),t("p",[s._v("在 "),t("code",[s._v("nexus")]),s._v(" 中，制品库一般分为以下三种类型：")]),s._v(" "),t("ul",[t("li",[s._v("proxy: 此类型制品库原则上"),t("strong",[s._v("只下载，不允许用户推送")]),s._v("。可以理解为"),t("strong",[s._v("缓存外网制品的制品库")]),s._v("。例如，我们在拉取 "),t("code",[s._v("nginx")]),s._v(" 镜像时，如果通过 "),t("code",[s._v("proxy")]),s._v(" 类型的制品库，则它会去创建时配置好的外网 "),t("code",[s._v("docker")]),s._v(" 镜像源拉取（有点像 "),t("code",[s._v("cnpm")]),s._v(" ）到自己的制品库，然后给你。第二次拉取，则不会从外网下载。起到 "),t("code",[s._v("内网缓存")]),s._v(" 的作用。")]),s._v(" "),t("li",[s._v("hosted：此类型制品库和 "),t("code",[s._v("proxy")]),s._v(" 相反，原则上 "),t("code",[s._v("只允许用户推送，不允许缓存")]),s._v("。这里只存放自己的私有镜像或制品。")]),s._v(" "),t("li",[s._v("group：此类型制品库可以将以上两种类型的制品库组合起来。组合后只访问 "),t("code",[s._v("group")]),s._v(" 类型制品库，就都可以访问。")])]),s._v(" "),t("p",[s._v("在这里，我们其实不需要"),t("strong",[s._v("缓存外网镜像")]),s._v("，那么我们只需要 "),t("code",[s._v("hosted")]),s._v(" 即可。选择 "),t("code",[s._v("docker (hosted)")]),s._v("。")]),s._v(" "),t("p",[s._v("我们将启动 "),t("code",[s._v("Nexus")]),s._v(" 镜像时，配置好的 "),t("code",[s._v("Docker")]),s._v(" 端口（预留了一个 "),t("code",[s._v("8082")]),s._v(" 端口）填入 "),t("code",[s._v("HTTP")]),s._v(" 输入框内。这里可以先允许匿名拉取镜像。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(1278),alt:"image.png"}})]),s._v(" "),t("p",[s._v("填写完成后，点击最下方的 **Create repository，**保存创建。")]),s._v(" "),t("h3",{attrs:{id:"给镜像库添加访问权限"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#给镜像库添加访问权限"}},[s._v("#")]),s._v(" 给镜像库添加访问权限")]),s._v(" "),t("p",[s._v("在我们创建好镜像库后，还需要配置一步访问权限才可以。")]),s._v(" "),t("p",[s._v("找到页面头部导航栏的 "),t("code",[s._v("齿轮")]),s._v(" 图标，选择左侧菜单中的 "),t("code",[s._v("Realms")]),s._v(" 。找到右边的 "),t("code",[s._v("Docker Bearer Token Realm")]),s._v(" ，将其添加到右边的 "),t("code",[s._v("Active")]),s._v(" 内，保存即可。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(1279),alt:"image.png"}})]),s._v(" "),t("h3",{attrs:{id:"查看获取镜像库地址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看获取镜像库地址"}},[s._v("#")]),s._v(" 查看获取镜像库地址")]),s._v(" "),t("p",[s._v("找到我们刚刚创建的制品，点击上面的 "),t("code",[s._v("copy")]),s._v(" ，查看镜像库地址。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(1280),alt:"image.png"}})]),s._v(" "),t("h2",{attrs:{id:"登录制品库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#登录制品库"}},[s._v("#")]),s._v(" 登录制品库")]),s._v(" "),t("p",[s._v("私服建设完成后，如果私服对外访问地址为HTTP的话，还需要在服务器配置一下才可以使用（HTTPS不需要配置）。")]),s._v(" "),t("p",[s._v("找到 "),t("code",[s._v("daemon.json")]),s._v(" 文件，该文件描述了当前 "),t("code",[s._v("docker")]),s._v(" 配置的镜像加速地址，和配置过的私服地址。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("vi")]),s._v(" /etc/docker/daemon.json\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("找到 "),t("code",[s._v("insecure-registries")]),s._v(" 字段，如果不存在就自己添加一个。值是数组类型，将你的制品库地址填写上去。例如：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"insecure-registries"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"172.16.81.7:8082"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(",\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("blockquote",[t("p",[s._v("注意，nexus 显示的镜像库端口为 nexus 服务端口，要替换为自己配置的端口才有效。")])]),s._v(" "),t("p",[s._v("保存并退出，重启 Docker")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("systemctl restart docker\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("接着使用 "),t("code",[s._v("docker login")]),s._v(" 命令尝试登录：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("docker login 服务IP:端口\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如果提示："),t("strong",[s._v("Login Succeeded")]),s._v(" 则代表登录成功。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(1281),alt:"image.png"}})]),s._v(" "),t("h2",{attrs:{id:"推送镜像到制品库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#推送镜像到制品库"}},[s._v("#")]),s._v(" 推送镜像到制品库")]),s._v(" "),t("p",[s._v("在完成镜像库配置后，我们就可以使用 Jenkins 推送自己的镜像到镜像库了。我们找到 Jenkins 任务中设置 Shell 的编辑框，添加一条推送镜像的命令进去：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(1282),alt:"image.png"}})]),s._v(" "),t("p",[t("strong",[s._v("注意！")])]),s._v(" "),t("p",[t("code",[s._v("docker")]),s._v(" 在推送一个镜像时，"),t("strong",[s._v("镜像的 Tag (名称:版本号) 开头必须带着镜像库的地址，才可以推送到指定的镜像库")]),s._v("。例如 "),t("code",[s._v("jenkins-test")]),s._v(" 是不能推送到镜像库的。而 "),t("code",[s._v("172.16.81.7:8082/jenkins-test")]),s._v(" 则可以推送到镜像库。")]),s._v(" "),t("p",[s._v("那我们怎么才能推送镜像上去呢？我们可以重新制作一份带镜像库地址的镜像。找到 Jenkins 的 Shell 编辑框，j将构建的 Shell 脚本修改为以下内容：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/sh -l")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" --registry"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("https://registry.npm.taobao.org\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" run build\ndocker build -t "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.16")]),s._v(".81.7:8082/jenkins-test "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\ndocker push "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.16")]),s._v(".81.7:8082/jenkins-test\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("这里将"),t("strong",[s._v("构建的镜像名称加了镜像库的前缀")]),s._v("，推送镜像也是一样，这样才可以将镜像推送到指定镜像库。保存后并重新构建一次。")]),s._v(" "),t("p",[s._v("构建后我们发现，报错了。提示信息是没有权限推送")]),s._v(" "),t("p",[t("img",{attrs:{src:a(1283),alt:"image.png"}})]),s._v(" "),t("h3",{attrs:{id:"利用凭据给-shell-注入镜像库用户名密码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#利用凭据给-shell-注入镜像库用户名密码"}},[s._v("#")]),s._v(" 利用凭据给 Shell 注入镜像库用户名密码")]),s._v(" "),t("p",[s._v("没有权限怎么办呢？我们可以使用 "),t("code",[s._v("docker login")]),s._v(" 在 "),t("code",[s._v("shell")]),s._v(" 脚本里面登录下。想直接在命令里写入用户名和密码，可以直接加 "),t("code",[s._v("-u 用户名 -p 密码")]),s._v(" 即可。例如：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("docker login -u "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"用户名"')]),s._v(" -p "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"密码"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.16")]),s._v(".81.7:8082\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("但这样，我们需要在命令里面写死用户名和密码，无论是安全和友好性上，都是不太合适的。这里我们可以借助 Jenkins 的凭据功能，添加一条用户名密码凭据，然后利用 Shell 变量写入在终端内。")]),s._v(" "),t("p",[s._v("找到任务的设置界面 => 构建环境 => 勾选 Use secret text(s) or file(s) => 找到左下角的新增按钮，选择 "),t("code",[s._v("Username and password (separated)")])]),s._v(" "),t("p",[t("img",{attrs:{src:a(1284),alt:"image.png"}})]),s._v(" "),t("p",[s._v("打开后，我们可以添加一条凭据。点击凭据字段下面的添加，弹出以下弹窗，在这里填入你的用户名和密码。ID为凭据名称，描述随意。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(1285),alt:"image.png"}})]),s._v(" "),t("p",[s._v("添加后，返回下图模块。在这里选择你刚才添加的凭据，用户名变量可以起名为 "),t("code",[s._v("DOCKER_LOGIN_USERNAME")]),s._v(" ，密码可以起名为 "),t("code",[s._v("DOCKER_LOGIN_PASSWORD")]),s._v(" 。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(1286),alt:"image.png"}})]),s._v(" "),t("p",[s._v("接着找到下面的构建，找到 "),t("code",[s._v("docker login")]),s._v(" 命令，将我们保存的用户名和密码变量填写进去：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("docker login -u "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$DOCKER_LOGIN_USERNAME")]),s._v(" -p "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$DOCKER_LOGIN_PASSWORD")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.16")]),s._v(".81.7:8082\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("接着保存并构建，提示权限通过，构建成功")]),s._v(" "),t("p",[t("img",{attrs:{src:a(1287),alt:"image.png"}})]),s._v(" "),t("h2",{attrs:{id:"如何推送已有的镜像到仓库呢"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何推送已有的镜像到仓库呢"}},[s._v("#")]),s._v(" 如何推送已有的镜像到仓库呢？")]),s._v(" "),t("p",[s._v("上面是推送我们现场编译的镜像，镜像名称都可以一条龙约定好。可是面对 load /pull 进来的镜像，我们如何推送到自己的镜像库呢？")]),s._v(" "),t("p",[s._v("这里可以使用 "),t("code",[s._v("docker tag")]),s._v(" 命令给已有的镜像打个标签。在打新Tag时可以在Tag头部加入镜像库地址。如下面格式。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker tag <镜像ID>/<镜像名称> 新镜像名称[:版本]")]),s._v("\ndocker tag bd695e3e4317 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.16")]),s._v(".81.150:8082/local/jenkins\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("blockquote",[t("p",[s._v("查看服务器上的docker镜像列表，可以使用 docker images 查看")])]),s._v(" "),t("p",[s._v("这样，就可以重新打一个全新的tag，实现 "),t("code",[s._v("重命名")]),s._v("  功能。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(1288),alt:"image.png"}})]),s._v(" "),t("p",[s._v("接着我们使用 "),t("code",[s._v("docker push")]),s._v(" 命令就可以进行推送了：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("docker push 172.16.81.150:8082/local/jenkins\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("img",{attrs:{src:a(1289),alt:"image.png"}})])])}),[],!1,null,null,null);e.default=n.exports}}]);