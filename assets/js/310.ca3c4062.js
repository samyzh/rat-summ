(window.webpackJsonp=window.webpackJsonp||[]).push([[310],{1808:function(t,v,_){"use strict";_.r(v);var r=_(14),s=Object(r.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"浏览器的渲染机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的渲染机制"}},[t._v("#")]),t._v(" 浏览器的渲染机制")]),t._v(" "),_("h3",{attrs:{id:"浏览器内核的理解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#浏览器内核的理解"}},[t._v("#")]),t._v(" 浏览器内核的理解")]),t._v(" "),_("p",[_("strong",[t._v("主要分成两部分")]),t._v("：渲染引擎(layout engineer或Rendering Engine) 和 JS引擎")]),t._v(" "),_("p",[t._v("最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，"),_("strong",[t._v("内核就倾向于只指渲染引擎")])]),t._v(" "),_("h4",{attrs:{id:"渲染引擎"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#渲染引擎"}},[t._v("#")]),t._v(" 渲染引擎")]),t._v(" "),_("p",[t._v("负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。"),_("strong",[t._v("浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同")]),t._v("。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。")]),t._v(" "),_("h4",{attrs:{id:"js引擎"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#js引擎"}},[t._v("#")]),t._v(" JS引擎")]),t._v(" "),_("p",[t._v("则解析和执行javascript来实现网页的动态效果。")]),t._v(" "),_("h3",{attrs:{id:"浏览器的基础结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的基础结构"}},[t._v("#")]),t._v(" 浏览器的基础结构")]),t._v(" "),_("p",[t._v("一般我们把浏览器的基础结构分为一下七个部分：")]),t._v(" "),_("ol",[_("li",[t._v("用户界面（User lnterface）:  即用户看到的及与之交互的功能组件，比如地址栏，返回，前进按钮等；")]),t._v(" "),_("li",[t._v("浏览器引擎（Browser engine）：负责控制和管理下一级的渲染引擎；")]),t._v(" "),_("li",[t._v("渲染引擎（Rendering engine）:  负责解析用户请求的内容（如HTML或XML，渲染引擎会解析HTML或XML,以及相关CSS，然后返回解析后的内容）；")]),t._v(" "),_("li",[t._v("（Networking）:负责处理网络相关的事物，如HTTP请求等；")]),t._v(" "),_("li",[t._v("UI后端（UI backend）:  负责绘制提示框等浏览器组件，其底层使用的是操作系统的用户接口；")]),t._v(" "),_("li",[t._v("JavaScript解释器（JavaScript interpreter）:  负责解析和执行JavaScript代码；")]),t._v(" "),_("li",[t._v("数据存储（Data storage）:负责持久存储如：cookie和缓存等应用数据。")])]),t._v(" "),_("h3",{attrs:{id:"浏览器及其内核"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#浏览器及其内核"}},[t._v("#")]),t._v(" 浏览器及其内核")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th"),t._v(" "),_("th",[t._v("Chrome")]),t._v(" "),_("th",[t._v("Firefox")]),t._v(" "),_("th",[t._v("Safari")]),t._v(" "),_("th",[t._v("Opera")]),t._v(" "),_("th",[t._v("IE,TT, 360")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("内核")]),t._v(" "),_("td",[t._v("以前Webkit，现Blink(WebKit分支)")]),t._v(" "),_("td",[t._v("Gecko(俗称Firefox内核)")]),t._v(" "),_("td",[t._v("Webkit")]),t._v(" "),_("td",[t._v("最初自己的Presto，后Webkit，现Blink")]),t._v(" "),_("td",[t._v("Trident(俗称IE内核)")])]),t._v(" "),_("tr",[_("td",[t._v("JS 引擎")]),t._v(" "),_("td",[t._v("V8")]),t._v(" "),_("td",[t._v("SpiderMonkey")]),t._v(" "),_("td",[t._v("Nitro")]),t._v(" "),_("td",[t._v("V8")]),t._v(" "),_("td",[t._v("Chakra")])])])]),t._v(" "),_("p",[_("strong",[t._v("国产浏览器")]),t._v("：")]),t._v(" "),_("p",[_("code",[t._v("360浏览器、猎豹浏览器内核")]),t._v("：IE+Chrome双内核；\n"),_("code",[t._v("搜狗、遨游、QQ浏览器内核")]),t._v("：Trident（兼容模式）+Webkit（高速模式）；\n"),_("code",[t._v("百度浏览器、世界之窗内核")]),t._v("：IE内核；\n"),_("code",[t._v("2345浏览器内核")]),t._v("：以前是IE内核，现在也是IE+Chrome双内核；")]),t._v(" "),_("h3",{attrs:{id:"整个浏览器工作的流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#整个浏览器工作的流程"}},[t._v("#")]),t._v(" 整个浏览器工作的流程")]),t._v(" "),_("ol",[_("li",[t._v("输入网址。")]),t._v(" "),_("li",[t._v("浏览器查找域名的IP地址。")]),t._v(" "),_("li",[t._v("浏览器给web服务器发送一个HTTP请求")]),t._v(" "),_("li",[t._v("网站服务的永久重定向响应")]),t._v(" "),_("li",[t._v("浏览器跟踪重定向地址 现在，浏览器知道了要访问的正确地址，所以它会发送另一个获取请求。")]),t._v(" "),_("li",[t._v("服务器“处理”请求，服务器接收到获取请求，然后处理并返回一个响应。")]),t._v(" "),_("li",[t._v("服务器发回一个HTML响应")]),t._v(" "),_("li",[t._v("浏览器开始显示HTML")]),t._v(" "),_("li",[t._v("浏览器发送请求，以获取嵌入在HTML中的对象。在浏览器显示HTML时，它会注意到需要获取其他地址内容的标签。这时，浏览器会发送一个获取请求来重新获得这些文件。这些文件就包括CSS/JS/图片等资源，这些资源的地址都要经历一个和HTML读取类似的过程。所以浏览器会在DNS中查找这些域名，发送请求，重定向等等…")])]),t._v(" "),_("p",[t._v("要点如下：")]),t._v(" "),_("ul",[_("li",[t._v("浏览器根据 DNS 服务器得到域名的 IP 地址")]),t._v(" "),_("li",[t._v("向这个 IP 的机器发送 HTTP 请求")]),t._v(" "),_("li",[t._v("服务器收到、处理并返回 HTTP 请求")]),t._v(" "),_("li",[t._v("浏览器得到返回内容")])]),t._v(" "),_("h3",{attrs:{id:"浏览器的渲染机制-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的渲染机制-2"}},[t._v("#")]),t._v(" 浏览器的渲染机制")]),t._v(" "),_("h4",{attrs:{id:"几个基本概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#几个基本概念"}},[t._v("#")]),t._v(" 几个基本概念")]),t._v(" "),_("p",[_("strong",[t._v("DOM")]),t._v("：Document Object Model，浏览器将HTML解析成树形的数据结构，简称DOM。\n"),_("strong",[t._v("CSSOM")]),t._v("：CSS Object Model，浏览器将CSS解析成树形的数据结构，简称CSSOM。\n"),_("strong",[t._v("Render Tree")]),t._v(": DOM和CSSOM合并后生成Render Tree。如下图\n"),_("strong",[t._v("Layout")]),t._v(": 计算出Render Tree每个节点的具体位置。\n"),_("strong",[t._v("Painting")]),t._v("：通过显卡，将Layout后的节点内容分别呈现到屏幕上。\n"),_("code",[t._v("![](~/12-28-32.jpg)")])]),t._v(" "),_("p",[_("img",{attrs:{src:"http://taligarsiel.com/Projects/webkitflow.png",alt:"Webkit main flow"}})]),t._v(" "),_("h4",{attrs:{id:"渲染步骤"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#渲染步骤"}},[t._v("#")]),t._v(" 渲染步骤")]),t._v(" "),_("p",[_("strong",[t._v("以Webkit内核浏览器为例")]),t._v("，浏览器的渲染可以分为以下几步："),_("strong",[t._v("【DCJ渲布绘】")])]),t._v(" "),_("ul",[_("li",[t._v("1.构建DOM树（DOM tree）:在刚开始渲染时，浏览器会自上而下解析HTML文档生成DOM节点树，也叫做内容树（content tree）;")]),t._v(" "),_("li",[t._v("2.加载解析样式，构建CSSOM树（CSS Object Model tree）；")]),t._v(" "),_("li",[t._v("3.加载并执行JavaScript代码；")]),t._v(" "),_("li",[t._v("4.根据DOM树和CSSOM树，生成渲染树（render tree）")]),t._v(" "),_("li",[t._v("5.布局（"),_("strong",[t._v("layout/reflow")]),t._v("）:根据渲染树将节点树的"),_("strong",[t._v("每一个节点布局在屏幕的正确位置")]),t._v("；")]),t._v(" "),_("li",[t._v("6.绘制（painting/repaint）："),_("strong",[t._v("遍历渲染树绘制的所有节点")]),t._v("，为每一个节点适用对应的样式，这一过程是"),_("strong",[t._v("通过UI后端模块完成的。")]),t._v("; 遍历渲染树，使用UI后端层来绘制每个节点。")])]),t._v(" "),_("p",[_("strong",[t._v("Gecko浏览器和Webkit浏览器渲染流程大致相同,不同的是")]),t._v("：")]),t._v(" "),_("ul",[_("li",[t._v("1.Webkit浏览器中的渲染树(render tree)，在Gecko浏览器中对应的则是框架树（frame tree）,渲染对象(render object)对应的是框架（frame）;")]),t._v(" "),_("li",[t._v("2.Webkit中的布局（Layout）过程，在Gecko中称为回流（Reflow）,本质是一样的，后文会解释回流的另一层含义–重新布局；")]),t._v(" "),_("li",[t._v("3.Gecko中HTML和DOM树中间"),_("strong",[t._v("多了")]),t._v("一层内容池（Content sink）,可以理解成"),_("strong",[t._v("生成DOM元素的工厂")]),t._v("。")])]),t._v(" "),_("p",[_("strong",[t._v("图示比较")]),t._v("："),_("a",{attrs:{href:"http://taligarsiel.com/Projects/howbrowserswork1.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文档"),_("OutboundLink")],1),t._v(" "),_("code",[t._v("![](~/15-07-38.jpg) ![](~/15-07-56.jpg) ![](~/16-07-36.jpg)")])]),t._v(" "),_("h4",{attrs:{id:"浏览器解析渲染页面"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#浏览器解析渲染页面"}},[t._v("#")]),t._v(" 浏览器解析渲染页面")]),t._v(" "),_("p",[t._v("浏览器拿到响应文本 HTML 后，接下来介绍下浏览器渲染机制")]),t._v(" "),_("p",[_("img",{attrs:{src:"http://taligarsiel.com/Projects/webkitflow.png",alt:"Webkit main flow"}})]),t._v(" "),_("p",[t._v("浏览器解析渲染页面分为一下五个步骤："),_("strong",[t._v("【DCJ渲布绘】")])]),t._v(" "),_("ul",[_("li",[t._v("根据 HTML 解析出 "),_("strong",[t._v("DOM 树")])]),t._v(" "),_("li",[t._v("根据 CSS 解析生成 "),_("strong",[t._v("CSS 规则树")])]),t._v(" "),_("li",[_("strong",[t._v("结合 DOM 树和 CSS 规则树，生成渲染树")])]),t._v(" "),_("li",[t._v("根据渲染树计算每一个节点的信息")]),t._v(" "),_("li",[t._v("根据计算好的信息绘制页面")])]),t._v(" "),_("h5",{attrs:{id:"_1-根据-html-解析-dom-树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-根据-html-解析-dom-树"}},[t._v("#")]),t._v(" 1.根据 HTML 解析 DOM 树")]),t._v(" "),_("ul",[_("li",[t._v("根据 HTML 的内容，将标签按照结构解析成为 DOM 树，DOM 树解析的过程是一个深度优先遍历。即先构建当前节点的所有子节点，再构建下一个兄弟节点。")]),t._v(" "),_("li",[t._v("在读取 HTML 文档，构建 DOM 树的过程中，若遇到 script 标签，则 DOM 树的构建会暂停，直至脚本执行完毕。")])]),t._v(" "),_("h5",{attrs:{id:"_2-根据-css-解析生成-css-规则树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-根据-css-解析生成-css-规则树"}},[t._v("#")]),t._v(" 2.根据 CSS 解析生成 CSS 规则树")]),t._v(" "),_("ul",[_("li",[t._v("解析 CSS 规则树时 js 执行将暂停，直至 CSS 规则树就绪。")]),t._v(" "),_("li",[t._v("浏览器在 CSS 规则树生成之前不会进行渲染。")])]),t._v(" "),_("h5",{attrs:{id:"_3-结合-dom-树和-css-规则树-生成渲染树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-结合-dom-树和-css-规则树-生成渲染树"}},[t._v("#")]),t._v(" 3.结合 DOM 树和 CSS 规则树，生成渲染树")]),t._v(" "),_("ul",[_("li",[t._v("DOM 树和 CSS 规则树全部准备好了以后，浏览器才会开始构建渲染树。")]),t._v(" "),_("li",[t._v("精简 CSS 并可以加快 CSS 规则树的构建，从而加快页面相应速度。")])]),t._v(" "),_("h5",{attrs:{id:"_4-根据渲染树计算每一个节点的信息-布局"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-根据渲染树计算每一个节点的信息-布局"}},[t._v("#")]),t._v(" 4.根据渲染树计算每一个节点的信息（布局）")]),t._v(" "),_("ul",[_("li",[t._v("布局：通过渲染树中渲染对象的信息，计算出每一个渲染对象的位置和尺寸")]),t._v(" "),_("li",[t._v("回流：在布局完成后，发现了某个部分发生了变化影响了布局，那就需要倒回去重新渲染。")])]),t._v(" "),_("h5",{attrs:{id:"_5-根据计算好的信息绘制页面"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-根据计算好的信息绘制页面"}},[t._v("#")]),t._v(" 5.根据计算好的信息绘制页面")]),t._v(" "),_("ul",[_("li",[t._v("绘制阶段，系统会遍历呈现树，并调用呈现器的“paint”方法，将呈现器的内容显示在屏幕上。")]),t._v(" "),_("li",[_("strong",[t._v("重绘")]),t._v("：某个元素的背景颜色，文字颜色等，不影响元素周围或内部布局的属性，"),_("strong",[t._v("将只会引起浏览器的重绘")]),t._v("。")]),t._v(" "),_("li",[_("strong",[t._v("回流")]),t._v("：某个元素的"),_("strong",[t._v("尺寸发生了变化")]),t._v("，则需"),_("strong",[t._v("重新计算渲染树，重新渲染")]),t._v("。")])]),t._v(" "),_("blockquote",[_("h4",{attrs:{id:"重绘-repaint-和回流-reflow"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#重绘-repaint-和回流-reflow"}},[t._v("#")]),t._v(" 重绘（Repaint）和回流（Reflow）")])]),t._v(" "),_("p",[t._v("重绘和回流是渲染步骤中的一小节，但是这两个步骤对于性能影响很大。")]),t._v(" "),_("ul",[_("li",[t._v("重绘是当节点需要更改外观而"),_("strong",[t._v("不会影响布局的")]),t._v("，比如改变 "),_("code",[t._v("color")]),t._v(" 就叫称为重绘")]),t._v(" "),_("li",[t._v("回流是布局或者几何属性"),_("strong",[t._v("需要改变就称为回流")]),t._v("。")])]),t._v(" "),_("h5",{attrs:{id:"总括"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总括"}},[t._v("#")]),t._v(" 总括")]),t._v(" "),_("p",[t._v("下面是渲染引擎在取得内容之后的基本流程：("),_("strong",[t._v("4步骤")]),t._v(")")]),t._v(" "),_("blockquote",[_("p",[t._v("解析html 以构建dom树【DOM tree】+cssom树【CSSOM tree】 -> 构建render树【render tree】 -> 布局render树【layout】 ->  绘制render树【painting】")])]),t._v(" "),_("p",[_("strong",[t._v("浏览器渲染过程大体分为如下三部分")]),t._v("：")]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("浏览器会解析三个东西")]),t._v("：")]),t._v(" "),_("ul",[_("li",[t._v("HTML/SVG/XHTML，解析这三种文件会产生一个 DOM Tree。")]),t._v(" "),_("li",[t._v("CSS，解析 CSS 会产生 CSS 规则树。")]),t._v(" "),_("li",[t._v("Javascript脚本，主要是"),_("strong",[t._v("通过 DOM API 和 CSSOM API 来操作 DOM Tree 和 CSS Rule Tree")]),t._v(".")])])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("解析完成后，浏览器引擎会通过DOM Tree 和 CSS Rule Tree 来构造 Rendering Tree。")])]),t._v(" "),_("ul",[_("li",[t._v("Rendering Tree 渲染树并不等同于DOM树，渲染树只会包括需要显示的节点和这些节点的样式信息。")]),t._v(" "),_("li",[t._v("CSS 的 Rule Tree主要是为了完成匹配并把CSS Rule附加到Rendering Tree上的每个Element（也就是每个Frame）。")]),t._v(" "),_("li",[t._v("然后，计算每个Frame 的位置，这又叫layout和reflow过程。")])])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("最后通过调用操作系统Native GUI的API绘制")])])])]),t._v(" "),_("h3",{attrs:{id:"资源加载顺序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#资源加载顺序"}},[t._v("#")]),t._v(" 资源加载顺序")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("当我们浏览器获得HTML文件后，"),_("strong",[t._v("会自上而下的加载，并在加载过程中进行解析和渲染。")])])]),t._v(" "),_("li",[_("p",[t._v("加载说的就是获取资源文件的过程，如果在加载过程中"),_("strong",[t._v("遇到外部CSS文件和图片")]),t._v("，浏览器会另外发送一个请求，去获取"),_("code",[t._v("CSS文件和相应的图片")]),t._v("，"),_("strong",[t._v("这个请求是异步的，并不会影响HTML文件的加载")]),t._v("。")])]),t._v(" "),_("li",[_("p",[t._v("但是如果"),_("strong",[t._v("遇到Javascript文件，HTML文件会"),_("code",[t._v("挂起渲染的进程")]),t._v("，等待JavaScript文件加载完毕后，再继续进行渲染。")])])])]),t._v(" "),_("blockquote",[_("p",[t._v("为什么HTML需要等待JavaScript呢？")])]),t._v(" "),_("p",[t._v("因为"),_("strong",[t._v("JavaScript可能会修改DOM，导致后续HTML资源空白白加载")]),t._v("，所以HTML必须等待JavaScript文件加载完毕后，再继续渲染，这也"),_("strong",[t._v("就是为什么JavaScript文件在写在底部body标签前的原因。")])]),t._v(" "),_("p",[t._v("把脚本放到页面顶部会导致明显的延迟，通常表现为"),_("strong",[t._v("显示空白页面，用户无法浏览内容，也无法和页面进行交互")]),t._v("。")]),t._v(" "),_("h3",{attrs:{id:"渲染相关性能优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#渲染相关性能优化"}},[t._v("#")]),t._v(" 渲染相关性能优化")]),t._v(" "),_("p",[t._v("了解"),_("strong",[t._v("浏览器如何进行加载")]),t._v("，我们可以"),_("strong",[t._v("在引用外部样式文件，外部JS时，将它们放到合适的位置")]),t._v("，是浏览器以最快的速度，将文件加载完毕。")]),t._v(" "),_("p",[t._v("了解"),_("strong",[t._v("浏览器如何进行解析")]),t._v("，我们可以"),_("strong",[t._v("在构建DOM结构，组织CSS选择器的时候，选择最优的写法")]),t._v("，提高浏览器的解析速率。")]),t._v(" "),_("p",[t._v("了解浏"),_("strong",[t._v("览器如何进行渲染")]),t._v("，明白渲染的过程，我们"),_("strong",[t._v("在设置元素属性，编写JS文件时，可以减少“重绘”，“重新布局”的消耗。")])]),t._v(" "),_("h4",{attrs:{id:"repaint-重绘-与reflow-回流-的比较区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#repaint-重绘-与reflow-回流-的比较区别"}},[t._v("#")]),t._v(" Repaint(重绘)与Reflow(回流)的比较区别")]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("Repaint")]),t._v(" ——改变某个元素的背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性时，"),_("strong",[t._v("屏幕的一部分要重画，但是元素的几何尺寸没有变。")])]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("常见引起重绘属性和方法")]),t._v(":改变元素的背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性\n"),_("code",[t._v("![](~/16-15-21.jpg)")])])])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("Reflow")]),t._v(" ——元件的几何尺寸变了，我们需要重新验证并计算Render Tree。"),_("strong",[t._v("是Render Tree的一部分或全部发生了变化。")]),t._v(" **Reflow要比Repaint更花费时间，也就更影响性能。**所以在写代码的时候，要尽量避免过多的Reflow。")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("常见引起回流属性和方法")]),t._v(": 任何会"),_("strong",[t._v("改变元素几何信息(元素的位置和尺寸大小)的操作")]),t._v("，都会触发回流，\n"),_("ul",[_("li",[t._v("页面初始化的时候； (无法避免)")]),t._v(" "),_("li",[t._v("如果 CSS 的属性发生变化;")]),t._v(" "),_("li",[t._v("添加或者删除可见的DOM元素；操作DOM时；")]),t._v(" "),_("li",[t._v("元素尺寸改变——边距、填充、边框、宽度和高度;")]),t._v(" "),_("li",[t._v("内容变化，比如用户在input框中输入文字")]),t._v(" "),_("li",[t._v("浏览器窗口尺寸改变——resize事件发生时")]),t._v(" "),_("li",[t._v("计算 offsetWidth 和 offsetHeight 属性")]),t._v(" "),_("li",[t._v("设置 style 属性的值")])])])]),t._v(" "),_("p",[t._v("引起重绘和回流的操作如下：")]),t._v(" "),_("ul",[_("li",[t._v("添加、删除元素（回流+重绘）")]),t._v(" "),_("li",[t._v("隐藏元素，display: none（回流+重绘），visibility:hidden（只重绘，不回流）;display:none会触发reflow+repaint，"),_("strong",[t._v("而visibility:hidden只会触发repaint，因为没有发现位置变化。")])]),t._v(" "),_("li",[t._v("移动元素，比如改变 top、left 的值，或者移动元素到另外一个父元素中。（重绘+回流）")]),t._v(" "),_("li",[t._v("对 style 的操作（对不同的属性操作，影响不一样）")]),t._v(" "),_("li",[t._v("还有一种是用户的操作，比如改变浏览器大小，改变浏览器的字体大小等（回流+重绘）")])])])]),t._v(" "),_("p",[_("strong",[t._v("注意问题：")])]),t._v(" "),_("blockquote",[_("p",[_("strong",[t._v("transform 操作不会引起重绘和回流，是一种高效率的渲染。"),_("strong",[t._v("这是因为")]),t._v("transform属于合成属性，对合成属性进行transition/animation 动画时将会创建一个合成层")]),t._v("，这使得动画元素在一个独立的层中进行渲染，当元素的内容没有发生改变，就没必要进行重绘，浏览器会通过重新复合来创建动画帧。")])]),t._v(" "),_("h4",{attrs:{id:"display-none与visibility-hidden的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#display-none与visibility-hidden的区别"}},[t._v("#")]),t._v(" display: none与visibility: hidden的区别")]),t._v(" "),_("p",[t._v("visibility: hidden和display: none的区别仅仅在于"),_("strong",[t._v("display: none隐藏后的元素不占据任何空间，而visibility: hidden隐藏后的元素空间依旧保留")]),t._v(" ，实际上没那么简单，visibility是一个非常有故事性的属性")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("1、"),_("strong",[t._v("visibility具有继承性，给父元素设置visibility:hidden;子元素也会继承这个属性")]),t._v("。但是如果重新给子元素设置visibility: visible,则子元素又会显示出来。这个和display: none有着质的区别")])]),t._v(" "),_("li",[_("p",[t._v("2、"),_("strong",[t._v("visibility: hidden不会影响计数器的计数")]),t._v("，如图所示，visibility: hidden虽然让一个元素不见了，但是其计数器仍在运行。这和display: none完全不一样")])]),t._v(" "),_("li",[_("p",[t._v("3、CSS3的transition支持visibility属性，但是并不支持display，由于transition可以延迟执行，因此可以配合visibility使用纯css实现hover延时显示效果。提高用户体验。")])])]),t._v(" "),_("h4",{attrs:{id:"减少-reflow-repaint-回流、重绘"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#减少-reflow-repaint-回流、重绘"}},[t._v("#")]),t._v(" 减少 reflow/repaint 回流、重绘")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("为"),_("strong",[t._v("动画的 HTML 元件使用 fixed 或 absoult 的 position，那么修改他们的 CSS 是不会 reflow 的")]),t._v("。")])]),t._v(" "),_("li",[_("p",[t._v("动画实现的速度的选择，动画速度越快，回流次数越多，也可以选择使用 requestAnimationFrame")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("千万不要使用 table 布局")]),t._v("。因为可能很小的一个小改动会造成整个 table 的重新布局。")])]),t._v(" "),_("li",[_("p",[t._v("使用 transform 替代 top")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("使用 visibility 替换 display: none")]),t._v(" ，因为前者只会引起重绘，后者会引发回流（改变了布局）")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("CSS 选择符从右往左匹配查找")]),t._v("，避免节点层级过多;")])]),t._v(" "),_("li",[_("p",[t._v("将频繁重绘或者回流的节点"),_("strong",[t._v("设置为图层")]),t._v("，图层能够阻止该节点的渲染行为影响别的节点。比如对于 video 标签来说，浏览器会自动将该节点变为图层。")])]),t._v(" "),_("li",[_("p",[t._v("不要一条一条地修改 DOM 的样式。与其这样，"),_("strong",[t._v("还不如预先定义好 css 的 class，然后修改 DOM 的 className。")])])]),t._v(" "),_("li",[_("p",[t._v("不要把 DOM 结点的属性值放在一个循环里当成循环里的变量。")]),t._v(" "),_("div",{staticClass:"language-js line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取 offsetTop 会导致回流，因为需要去获取正确的值")]),t._v("\n  console"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("document"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.test'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("offsetTop"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br")])])])]),t._v(" "),_("h4",{attrs:{id:"性能优化策略"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#性能优化策略"}},[t._v("#")]),t._v(" 性能优化策略")]),t._v(" "),_("blockquote",[_("p",[t._v("基于上面介绍的浏览器渲染原理，DOM 和 CSSOM 结构构建顺序，初始化可对页面渲染做些优化，提升页面性能。")])]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("CSS优化")]),t._v("： "),_("code",[t._v("<link>")]),t._v(" 标签的 "),_("strong",[t._v("rel属性中的属性值设置为preload")]),t._v("能够让你在你的HTML页面中可以指明哪些资源是在页面加载完成后即刻需要的,"),_("strong",[t._v("最优的配置加载顺序，提高渲染性能")])]),t._v(" "),_("li",[_("strong",[t._v("JS优化")]),t._v("： "),_("code",[t._v("<script>")]),t._v(" 标签加上 defer属性 和 async属性用于在不阻塞页面文档解析的前提下，控制脚本的下载和执行。\n"),_("ul",[_("li",[t._v("defer属性： 用于开启新的线程下载脚本文件，并使脚本在文档解析"),_("strong",[t._v("完成后执行。延迟加载")]),t._v("【推荐】")]),t._v(" "),_("li",[t._v("async属性： HTML5新增属性，用于异步下载脚本文件，"),_("strong",[t._v("下载完毕立即解释执行代码")]),t._v("。异步加载")])])])]),t._v(" "),_("h4",{attrs:{id:"写css的时候需要注意"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#写css的时候需要注意"}},[t._v("#")]),t._v(" 写css的时候需要注意")]),t._v(" "),_("ul",[_("li",[t._v("dom深度尽量浅。")]),t._v(" "),_("li",[_("strong",[t._v("减少inline javascript、css的数量")]),t._v("。")]),t._v(" "),_("li",[t._v("使用现代合法的css属性。")]),t._v(" "),_("li",[t._v("不要为id选择器指定类名或是标签，因为id可以唯一确定一个元素。")]),t._v(" "),_("li",[_("strong",[t._v("避免后代选择符，尽量使用子选择符")]),t._v("。原因：子元素匹配符的概率要大于后代元素匹配符。后代选择符;#tp p{} 子选择符：#tp>p{}")]),t._v(" "),_("li",[_("strong",[t._v("避免使用通配符")]),t._v("，举一个例子，.mod .hd *{font-size:14px;} 根据匹配顺序,将首先匹配通配符,也就是说先匹配出通配符,然后匹配.hd（就是要对dom树上的所有节点进行遍历他的父级元素）,然后匹配.mod,这样的性能耗费可想而知.")])]),t._v(" "),_("h4",{attrs:{id:"减少js对性能的影响的方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#减少js对性能的影响的方法"}},[t._v("#")]),t._v(" 减少js对性能的影响的方法")]),t._v(" "),_("ul",[_("li",[t._v("将所有的script标签放到页面底部，"),_("strong",[t._v("也就是body闭合标签之前")]),t._v("，这能确保在脚本执行前页面已经完成了DOM树渲染。")]),t._v(" "),_("li",[t._v("尽可能地合并脚本。页面中的script标签越少，加载也就越快，响应也越迅速。无论是外链脚本还是内嵌脚本都是如此。")]),t._v(" "),_("li",[t._v("采用无阻塞下载 JavaScript 脚本的方法：\n（1）使用script标签的 defer 属性（仅适用于 IE 和 Firefox 3.5 以上版本）；\n（2）使用动态创建的script元素来下载并执行代码；")])]),t._v(" "),_("h2",{attrs:{id:"性能优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#性能优化"}},[t._v("#")]),t._v(" 性能优化")]),t._v(" "),_("p",[t._v("通过优化从而提高页面的加载速度。")]),t._v(" "),_("h3",{attrs:{id:"缓存方面优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存方面优化"}},[t._v("#")]),t._v(" 缓存方面优化")]),t._v(" "),_("h4",{attrs:{id:"使用cdn-减少资源下载时间"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#使用cdn-减少资源下载时间"}},[t._v("#")]),t._v(" 使用CDN，减少资源下载时间")]),t._v(" "),_("p",[t._v("CDN"),_("strong",[t._v("内容分发网络")]),t._v("，用户访问一个URL的时候，"),_("strong",[t._v("CDN会根据用户所在区域，访问的内容和服务器的负载")]),t._v("情况，返回一台缓存服务器的IP地址给用户访问；")]),t._v(" "),_("p",[t._v("浏览器从服务器上下载 CSS、js 和图片等文件时都要和服务器连接，"),_("strong",[t._v("而大部分服务器的带宽有限，如果超过限制，网页就半天反应不过来")]),t._v("。而 CDN 可以"),_("strong",[t._v("通过不同的域名来加载文件，从而使下载文件的并发连接数大大增加")]),t._v("，且CDN 具有更好的可用性，更低的网络延迟和丢包率 。")]),t._v(" "),_("p",[t._v("静态资源尽量使用 CDN 加载，由于"),_("strong",[t._v("浏览器对于单个域名有并发请求上限")]),t._v("，可以考虑使用多个 CDN 域名。对于 CDN 加载静态资源需要注意 CDN 域名要与主站不同，否则每次请求都会带上主站的 Cookie。")]),t._v(" "),_("p",[t._v("常用CDN公共库：总结：如果网站"),_("strong",[t._v("面向国内用户推荐使用 BootCDN，面向国际用户则使用 jsDelivr")]),t._v("。")]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"http://www.bootcdn.cn/",target:"_blank",rel:"noopener noreferrer"}},[_("s",[t._v("BootCDN")]),_("OutboundLink")],1),t._v("（跳转到 cdnjs）推荐")]),t._v(" "),_("li",[_("a",{attrs:{href:"http://www.jsdelivr.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("jsDelivr"),_("OutboundLink")],1),t._v(" (Multi-CDN, 有"),_("a",{attrs:{href:"https://www.jsdelivr.com/features/cdn-in-asia-and-china",target:"_blank",rel:"noopener noreferrer"}},[t._v("国内节点"),_("OutboundLink")],1),t._v(") 推荐")]),t._v(" "),_("li",[_("a",{attrs:{href:"https://unpkg.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("unpkg"),_("OutboundLink")],1),t._v(" (by Heroku & CloudFlare) 推荐")]),t._v(" "),_("li",[_("a",{attrs:{href:"http://staticfile.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("开放静态文件 CDN - 七牛"),_("OutboundLink")],1),t._v(" 推荐")]),t._v(" "),_("li",[_("a",{attrs:{href:"https://cdn.baomitu.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("75CDN 前端静态资源库"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://cdn.bytedance.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("今日头条静态资源公共库"),_("OutboundLink")],1)])]),t._v(" "),_("p",[t._v("小提示：如果你使用 CDN 服务，"),_("strong",[t._v("建议准备一个备胎，万一 CDN 服务挂了，可以从自己的服务器上读取")]),t._v("：")]),t._v(" "),_("div",{staticClass:"language-js line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script src"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"//cdn.staticfile.org/jquery/2.0.0/jquery.min.js"')]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("window"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("jQuery "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" document"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<script src=\"/jquery.min.js\"><\\/script>'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br")])]),_("p",[t._v("使用实例：")]),t._v(" "),_("div",{staticClass:"language-js line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//unpkg.com/:package@:version/:file")]),t._v("\nhttps"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("unpkg"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("jquery@"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.4")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("dist"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("jquery"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("js\nhttps"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("unpkg"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("react@"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("16.7")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v(".0")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("umd"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("react"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("production"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("min"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("js\nhttps"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("unpkg"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("react"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("umd"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("react"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("production"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("min"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("js\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br"),_("span",{staticClass:"line-number"},[t._v("4")]),_("br")])]),_("h4",{attrs:{id:"根据http缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#根据http缓存"}},[t._v("#")]),t._v(" 根据http缓存")]),t._v(" "),_("h5",{attrs:{id:"按协议分"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#按协议分"}},[t._v("#")]),t._v(" 按协议分")]),t._v(" "),_("blockquote",[_("p",[_("strong",[t._v("协议层缓存和非 http 协议缓存")])])]),t._v(" "),_("p",[_("strong",[t._v("非协议层缓存")]),t._v("：利用 "),_("code",[t._v("meta")]),t._v(" 标签的 "),_("code",[t._v("http-equiv")]),t._v(" 属性值 "),_("code",[t._v("Expires")]),t._v(","),_("code",[t._v("set-cookie")]),t._v("。\n"),_("strong",[t._v("协议层缓存")]),t._v("：利用 http 协议头属性值设置；")]),t._v(" "),_("h5",{attrs:{id:"按缓存分"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#按缓存分"}},[t._v("#")]),t._v(" 按缓存分")]),t._v(" "),_("blockquote",[_("p",[t._v("强缓存和协商缓存")])]),t._v(" "),_("p",[_("strong",[t._v("强缓存")]),t._v("：利用 cache-control 和 expires 设置，直接返回一个过期时间，所以在缓存期间不请求；")]),t._v(" "),_("p",[_("strong",[t._v("协商缓存")]),t._v("：响应头返回 etag 或 last-modified 的哈希值，"),_("strong",[t._v("第二次请求头 If-none-match 或 IF-modify-since 携带上次哈希值")]),t._v("，一致则返回 304。")]),t._v(" "),_("p",[_("strong",[t._v("添加Expires头")]),t._v("：可以"),_("strong",[t._v("最大化地利用浏览器的缓存能力来改善页面的性能")]),t._v("。通过使用一个长久的Expires头，使组件被缓存，可以在后续的页面浏览中避免不必要的http请求。\nweb服务器使用Expires头来告诉web客户端它可以使用一个组件的当前副本，直到指定时间为止。")]),t._v(" "),_("p",[_("strong",[t._v("Cache-Control")]),t._v("：Expires头有一定的限制，就是要求服务器和客户端的时钟严格同步，另外，过期日期需要经常检查。HTTP 1.1引入了Cache-Control头来克服Expires头的限制。"),_("strong",[t._v("Cache-Control可以重写Expires头")]),t._v("。")]),t._v(" "),_("p",[_("strong",[t._v("对于强制缓存，服务器响应的header中会用两个字段来表明——Expires和Cache-Control")]),t._v("。")]),t._v(" "),_("h4",{attrs:{id:"expires"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#expires"}},[t._v("#")]),t._v(" Expires")]),t._v(" "),_("p",[t._v("Exprires的值为服务端返回的数据到期时间。当再次请求时的请求时间小于返回的此时间，则直接使用缓存数据。但"),_("strong",[t._v("由于服务端时间和客户端时间可能有误差，这也将导致缓存命中的误差")]),t._v("，另一方面，Expires是HTTP1.0的产物，故现在大多数使用Cache-Control替代。")]),t._v(" "),_("h4",{attrs:{id:"cache-control"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[t._v("#")]),t._v(" Cache-Control")]),t._v(" "),_("p",[t._v("Cache-Control有很多属性，不同的属性代表的意义也不同。")]),t._v(" "),_("p",[t._v("private：客户端可以缓存")]),t._v(" "),_("p",[t._v("public：客户端和代理服务器都可以缓存")]),t._v(" "),_("p",[t._v("max-age=t：缓存内容将在t秒后失效")]),t._v(" "),_("p",[t._v("no-cache："),_("strong",[t._v("需要使用协商缓存来验证缓存数据")])]),t._v(" "),_("p",[t._v("no-store：所有内容都不会缓存。")]),t._v(" "),_("h3",{attrs:{id:"资源文件方面优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#资源文件方面优化"}},[t._v("#")]),t._v(" 资源文件方面优化")]),t._v(" "),_("h4",{attrs:{id:"html-优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#html-优化"}},[t._v("#")]),t._v(" HTML 优化")]),t._v(" "),_("ol",[_("li",[t._v("避免 "),_("strong",[t._v("HTML 中书写 CSS 代码")]),t._v("，因为这样难以维护。")]),t._v(" "),_("li",[_("strong",[t._v("使用 Viewport 加速")]),t._v("页面的渲染。")]),t._v(" "),_("li",[t._v("使用"),_("strong",[t._v("语义化标签")]),t._v("，减少 CSS 代码，增加可读性和 SEO。")]),t._v(" "),_("li",[t._v("减少标签的使用，DOM 解析是一个大量遍历的过程，减少不必要的标签，能降低遍历的次数。")]),t._v(" "),_("li",[_("strong",[t._v("避免 src、href 等的值为空，因为即时它们为空")]),t._v("，浏览器也会发起 HTTP 请求。")]),t._v(" "),_("li",[_("strong",[t._v("减少 DNS 查询的次数")]),t._v("。")]),t._v(" "),_("li",[t._v("减少iframe负担；"),_("strong",[t._v("iframe会阻止页面的加载")]),t._v("，而且即使iframe内容为空也会消耗时间，所以尽量避免使用;")])]),t._v(" "),_("h4",{attrs:{id:"css-优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#css-优化"}},[t._v("#")]),t._v(" CSS 优化")]),t._v(" "),_("ol",[_("li",[_("strong",[t._v("优化选择器路径")]),t._v("：使用 "),_("code",[t._v(".c {}")]),t._v(" 而不是 "),_("code",[t._v(".a .b .c {}")]),t._v("。")]),t._v(" "),_("li",[t._v("选择器合并："),_("strong",[t._v("共同的属性内容提起出来，压缩空间和资源开销")]),t._v("。")]),t._v(" "),_("li",[_("strong",[t._v("精准样式")]),t._v("：使用 "),_("code",[t._v("padding-left: 10px")]),t._v(" 而不是 "),_("code",[t._v("padding: 0 0 0 10px")]),t._v("。")]),t._v(" "),_("li",[_("strong",[t._v("雪碧图")]),t._v("：将小的图标合并到一张图中，这样"),_("strong",[t._v("所有的图片只需要请求一次")]),t._v("。")]),t._v(" "),_("li",[_("strong",[t._v("避免通配符")]),t._v("："),_("code",[t._v(".a .b * {}")]),t._v(" 这样的选择器，根据从右到左的解析顺序在解析过程中遇到通配符 "),_("code",[t._v("* {}")]),t._v(" 会遍历整个 DOM，性能大大损耗。")]),t._v(" "),_("li",[_("strong",[t._v("少用 float")]),t._v("："),_("strong",[_("code",[t._v("float")]),t._v(" 在渲染时计算量比较大，可以使用 flex 布局")]),t._v("。")]),t._v(" "),_("li",[_("strong",[t._v("为 0 值去单位")]),t._v("：增加兼容性。")]),t._v(" "),_("li",[_("strong",[t._v("压缩文件大小")]),t._v("，减少资源下载负担。")]),t._v(" "),_("li",[_("strong",[t._v("用link代替@import")]),t._v("：页面被加载的时，"),_("strong",[t._v("link会同时被加载")]),t._v("，而@import引用的CSS会等到页面"),_("strong",[t._v("被加载完再加载")]),t._v("; @import相当于将css放在网页内容底部。")])]),t._v(" "),_("h4",{attrs:{id:"javascript-优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#javascript-优化"}},[t._v("#")]),t._v(" JavaScript 优化")]),t._v(" "),_("ol",[_("li",[t._v("尽可能把 "),_("code",[t._v("<script>")]),t._v(" 标签放在 "),_("code",[t._v("body")]),t._v(" 之后，"),_("strong",[t._v("避免 JS 的执行卡住 DOM 的渲染")]),t._v("，最大程度保证页面尽快地展示出来。")]),t._v(" "),_("li",[_("strong",[t._v("尽可能合并 JS 代码")]),t._v("：提取公共方法，进行面向对象设计等……")]),t._v(" "),_("li",[t._v("CSS 能做的事情，尽量不用 JS 来做，毕竟 JS 的解析执行比较粗暴，"),_("strong",[t._v("而 CSS 效率更高")]),t._v("。")]),t._v(" "),_("li",[_("strong",[t._v("尽可能少地创建 DOM")]),t._v("，而是在 HTML 和 CSS 中使用 "),_("code",[t._v("display: none")]),t._v(" 来隐藏，按需显示 。其实应该用visibility:hidden;")]),t._v(" "),_("li",[_("strong",[t._v("压缩文件大小")]),t._v("，减少资源下载负担。")]),t._v(" "),_("li",[t._v("尽可能逐条操作 DOM，"),_("strong",[t._v("并预定好 CSS 样式")]),t._v("，从而"),_("strong",[t._v("减少 reflow 或者 repaint 的次数")]),t._v("。")]),t._v(" "),_("li",[_("strong",[t._v("减少重排与重绘")]),t._v("：先让元素脱离文档流，处理完毕后再让元素回归文档流，这样浏览器"),_("strong",[t._v("只会进行两次重排与重绘（脱离时和回归时）")])]),t._v(" "),_("li",[_("strong",[t._v("减少DOM元素数量")]),t._v("：网页中元素过多对网页的加载和脚本的执行都是沉重的负担，500个元素和5000个元素在加载速度上会有很大差别。所以减少DOM元素数量是十分有必要的。")]),t._v(" "),_("li",[_("strong",[t._v("减少DOM操作")]),t._v("：通过js访问DOM元素没有想象中快，元素多的网页尤其慢，利用js对DOM的访问时要注意:\n"),_("ul",[_("li",[t._v("缓存已经访问过的元素；把"),_("strong",[t._v("DOM集合的长度缓存")]),t._v("到变量中并在迭代中使用。读变量比读DOM的速度要快;")]),t._v(" "),_("li",[t._v("Offline更新节点然后再加回DOM Tree")]),t._v(" "),_("li",[t._v("避免通过Javascript修复layout")])])])]),t._v(" "),_("h4",{attrs:{id:"图片优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#图片优化"}},[t._v("#")]),t._v(" 图片优化")]),t._v(" "),_("h5",{attrs:{id:"计算图片大小"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#计算图片大小"}},[t._v("#")]),t._v(" 计算图片大小")]),t._v(" "),_("p",[t._v("对于一张 100 * 100 像素的图片来说，图像上有 10000 个像素点，如果每个像素的值是 RGBA 存储的话，那么也就是说每个像素有 4 个通道，每个通道 1 个字节（8 位 = 1个字节），所以该图片大小大概为 "),_("strong",[t._v("39KB（10000 * 1 * 4 / 1024）")]),t._v("。")]),t._v(" "),_("p",[t._v("但是在实际项目中，一张图片可能并不需要使用那么多颜色去显示，我们可以"),_("strong",[t._v("通过减少每个像素的调色板来相应缩小图片的大小")]),t._v("。了解了如何计算图片大小的知识，那么对于如何优化图片，想必大家已经有 2 个思路了：")]),t._v(" "),_("ul",[_("li",[t._v("减少像素点")]),t._v(" "),_("li",[t._v("减少每个像素点能够显示的颜色")])]),t._v(" "),_("h5",{attrs:{id:"图片加载优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#图片加载优化"}},[t._v("#")]),t._v(" 图片加载优化")]),t._v(" "),_("ol",[_("li",[t._v("不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片完全"),_("strong",[t._v("可以用 CSS 去代替")]),t._v("。")]),t._v(" "),_("li",[t._v("对于移动端来说，屏幕宽度就那么点，完全没有必要去加载原图浪费带宽。一般图片都用 "),_("strong",[t._v("CDN 加载")]),t._v("，可以计算出适配屏幕的宽度，然后去"),_("strong",[t._v("请求相应裁剪好的图片")]),t._v("。")]),t._v(" "),_("li",[_("strong",[t._v("小图使用 base64 格式")]),t._v("；")]),t._v(" "),_("li",[t._v("将多个图标文件整合到一张图片中**（雪碧图）"),_("strong",[t._v("；将多个图片合并到一个单独的图片中。如果用作背景图片，可以")]),t._v("根据background-position来定位背景**，这样需要很多张背景图片现在就只需要一张了。也就是本来需要发送多次http请求来请求图片现在只需要发送一次就可以了。")]),t._v(" "),_("li",[t._v("选择正确的图片格式：\n"),_("ul",[_("li",[t._v("对于能够显示 WebP 格式的浏览器"),_("strong",[t._v("尽量使用 WebP 格式")]),t._v("。因为 WebP 格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好")]),t._v(" "),_("li",[_("strong",[t._v("小图使用 PNG")]),t._v("，其实对于"),_("strong",[t._v("大部分图标这类图片，完全可以使用 SVG 代替")])]),t._v(" "),_("li",[_("strong",[t._v("照片使用 JPEG")])])])]),t._v(" "),_("li",[_("strong",[t._v("内联图片")]),t._v(" ；通过"),_("strong",[t._v("编码的字符串将图片内嵌到网页文本中")]),t._v("。通过使用data: URL模式可以在web页面中包含图片"),_("strong",[t._v("但无需额外的http请求")]),t._v("。")])]),t._v(" "),_("h4",{attrs:{id:"网络加载方面优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#网络加载方面优化"}},[t._v("#")]),t._v(" 网络加载方面优化")]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("服务端开启文件压缩功能")])]),t._v(" "),_("ul",[_("li",[t._v("启用GZIP压缩；保持良好的编程习惯，避免重复的CSS，JavaScript代码，多余的HTML标签和属性;")])])]),t._v(" "),_("li",[_("p",[t._v("将 "),_("code",[t._v("script")]),t._v(" 标签放在 "),_("code",[t._v("body")]),t._v(" 底部，因为 JS 文件执行会阻塞渲染。")]),t._v(" "),_("ul",[_("li",[t._v("当然也可以把 "),_("code",[t._v("script")]),t._v(" 标签放在任意位置然后加上 "),_("code",[t._v("defer")]),t._v(" ，表示该文件会"),_("strong",[t._v("并行下载，但是会放到 HTML 解析完成后顺序执行。")])]),t._v(" "),_("li",[t._v("对于没有任何依赖的 JS 文件可以加上 "),_("code",[t._v("async")]),t._v(" ，表示"),_("strong",[t._v("加载和渲染后续文档元素的过程将和  JS 文件的加载与执行并行无序进行")]),t._v("。")])])]),t._v(" "),_("li",[_("p",[t._v("执行 JS 代码过长会卡住渲染，对于需要很多时间计算的代码"),_("strong",[t._v("可以考虑使用 "),_("code",[t._v("Webworker")])]),t._v("。"),_("code",[t._v("Webworker")]),t._v(" 可以让我们另开一个线程执行脚本而不影响渲染。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("使用多域名")]),t._v("及使用"),_("strong",[t._v("内容发布网络（CDN）")]),t._v("；"),_("strong",[t._v("浏览器一般会限制每个域的并行线程")]),t._v("（一般为 6 个，甚至更少），使用不同的域名可以最大化下载线程，但"),_("strong",[t._v("注意保持在 "),_("code",[t._v("2-4 个域名")]),t._v("内，以避免 DNS 查询损耗")]),t._v("。")])]),t._v(" "),_("li",[_("p",[t._v("压缩大小；合并js、css文件，图片做成雪碧图，减少请求；")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("延迟(懒)加载")]),t._v("：需要知道网页最初加载需要的最小内容集是什么。剩下的内容就可以延迟加载了。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("提前加载")]),t._v("：与延迟加载目的相反，提前加载的是为了提前加载接下来网页中要访问的资源。")])]),t._v(" "),_("li",[_("p",[t._v("icon类可以"),_("strong",[t._v("使用iconfont或者SVG")])])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("减少http请求")]),t._v("；http请求需要进行三次握手，这是很费时间的。通过查看流量也可以发现，大部分的时间都花在了为html文档所引用的所有组件进行的http请求上。因此减少http请求可以提高网站性能。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("合并脚本和样式表")]),t._v("；将多个js脚本文件打包成一个文件，将多个css样式表打包成一个样式表。如果分成多个小文件，每个文件都会导致一个额外的http请求。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("压缩组件")]),t._v("：压缩组件可以减小http响应的大小，进而减少响应时间。如果http请求产生的响应包很小，传输时间就会减少。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("将样式表放在顶部")]),t._v("：将样式表放在文档底部会导致在浏览器中阻止内容逐步呈现**，将样式表放在顶部会显得加载速度更快**，这样可以是浏览器逐步呈现已经下载的网页内容。对于内容比较多的网页尤其重要，用户不用一直等待一个白屏的页面，而是可以先看已经下载的内容。"),_("strong",[t._v("CSS 文件放在 "),_("code",[t._v("head")]),t._v(" 中")])])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("将脚本放在底部")]),t._v("：在使用样式表时，页面逐步呈现会被阻止，直到所有的样式表下载完成。"),_("strong",[t._v("将样式表移到head中")]),t._v("，就能首先下载样式表而不会阻止页面呈现。使用脚本时，所有位于脚本以下的内容，逐步呈现都会被阻塞，"),_("strong",[t._v("将脚本放在页面越靠下的位置，意味着越多的内容能够逐步地呈现")]),t._v("。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("避免CSS表达式")]),t._v("：css表达式的问题在于对其进行求值的频率比我们期望的要高。不只是在页面呈现和大小改变时求值，当页面滚动、甚至用户鼠标在页面上移过时都要求值。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("使用外部JavaScript和CSS")]),t._v("：")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("减少DNS查找")]),t._v("：Internet是通过ip地址来查找服务器的，由于IP地址很难记忆，通常使用url代替，但是当浏览器发送http请求时还是需要ip地址，DNS就是用来将url映射到ip地址上的。DNS查找当然也是有开销的，通常要花费20-120毫秒。在DNS查找完成之前，浏览器不能从主机名那下载到任何内容。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("DNS缓存")]),t._v("：DNS查找可以被缓存起来以提高查找性能，通常浏览器和用户主机都会进行DNS缓存。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("减少DNS查找")]),t._v("：DNS查找的数量与页面中唯一主机名的数量相等，包括页面url、图片、脚本文件、样式表、Flash对象等的主机名。"),_("strong",[t._v("减少唯一主机名的数量就可以减少DNS查找的数量")]),t._v("。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("精简JavaScript")]),t._v("：精简，就是从代码中移除不必要的字符以减小其大小，进而改善页面加载时间。同样，css文件也可以进行精简。压缩同时也可以减小所需要请求文件的大小，进而加快文件的请求。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("避免重定向")]),t._v("：重定向是将用户从一个url重新路由到另一个url，重定向会使页面加载变慢。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("移除重复脚本")]),t._v("：在一个页面中两次包含同样的一个js文件会损伤性能。一个大型的网站可能是多人协作或者多团队协作的，这样脚本被重复添加是很可能发生的事情。重复的脚本会增加不必要的http请求和浪费执行js所用的时间，这样会损伤页面性能，所以需要避免使用同样的脚本。")])])]),t._v(" "),_("h3",{attrs:{id:"页面重构操作优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#页面重构操作优化"}},[t._v("#")]),t._v(" 页面重构操作优化")]),t._v(" "),_("h4",{attrs:{id:"网站重构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#网站重构"}},[t._v("#")]),t._v(" 网站重构")]),t._v(" "),_("blockquote",[_("p",[t._v("在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。\n也就是说是在不改变UI的情况下，对网站进行优化，在扩展的同时保持一致的UI。")])]),t._v(" "),_("p",[t._v("对于传统的网站来说重构通常是：")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("表格(table)布局改为DIV+CSS")]),t._v(";\n"),_("ul",[_("li",[t._v("为什么不使用表格布局\n"),_("ul",[_("li",[t._v("更多的标签，增加文件大小；")]),t._v(" "),_("li",[t._v("不易维护，无法适应响应式设计；")]),t._v(" "),_("li",[_("strong",[t._v("性能考量")]),t._v("，默认的表格布局算法会产生大量重绘")])])])])]),t._v(" "),_("li",[t._v("使网站前端兼容于现代浏览器(针对于不合规范的CSS、如对IE6有效的)")]),t._v(" "),_("li",[t._v("对于移动平台的优化")]),t._v(" "),_("li",[t._v("针对于SEO进行优化")]),t._v(" "),_("li",[t._v("深层次的网站重构应该考虑的方面")]),t._v(" "),_("li",[t._v("减少代码间的耦合")]),t._v(" "),_("li",[t._v("让代码保持弹性")]),t._v(" "),_("li",[t._v("严格按规范编写代码")]),t._v(" "),_("li",[t._v("设计可扩展的API")]),t._v(" "),_("li",[t._v("代替旧有的框架、语言(如VB)")]),t._v(" "),_("li",[t._v("增强用户体验")]),t._v(" "),_("li",[t._v("通常来说对于速度的优化也包含在重构中")]),t._v(" "),_("li",[t._v("压缩JS、CSS、image等前端资源(通常是由服务器来解决)")]),t._v(" "),_("li",[t._v("程序的性能优化(如数据读写)")]),t._v(" "),_("li",[t._v("采用CDN来加速资源加载")]),t._v(" "),_("li",[t._v("对于JS DOM的优化")]),t._v(" "),_("li",[t._v("HTTP服务器的文件缓存")])]),t._v(" "),_("h3",{attrs:{id:"性能监控"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#性能监控"}},[t._v("#")]),t._v(" 性能监控")]),t._v(" "),_("p",[t._v("可以使用第三方工具。浏览器也有相应api  "),_("strong",[t._v("performace.timing")])]),t._v(" "),_("ul",[_("li",[t._v("白屏时间：responseStart - navigationStart")]),t._v(" "),_("li",[t._v("首屏时间：imgLoadTime(自己计算的，api没有) - navigationStart")]),t._v(" "),_("li",[t._v("用户可操作时间：domContentLoadedEventEnd - navigationStart;")]),t._v(" "),_("li",[t._v("Dom加载完成时间：loadEventEnd - navigationStart")])]),t._v(" "),_("h4",{attrs:{id:"查找性能瓶颈"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#查找性能瓶颈"}},[t._v("#")]),t._v(" 查找性能瓶颈")]),t._v(" "),_("p",[t._v("Chrome 的 Performance 面板可以录制一段时间内的 js 执行细节及时间。使用 Chrome 开发者工具分析页面性能的步骤如下。")]),t._v(" "),_("ol",[_("li",[t._v("打开 Chrome 开发者工具，切换到 Performance 面板")]),t._v(" "),_("li",[t._v("点击 Record 开始录制")]),t._v(" "),_("li",[t._v("刷新页面或展开某个节点")]),t._v(" "),_("li",[t._v("点击 Stop 停止录制")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://pic.xiaohuochai.site/blog/chromePerformance2.png",alt:"图片示例"}})]),t._v(" "),_("h3",{attrs:{id:"简要性能优化的方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#简要性能优化的方法"}},[t._v("#")]),t._v(" 简要性能优化的方法")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("减少http请求次数")]),t._v("：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。")]),t._v(" "),_("li",[t._v("前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数")]),t._v(" "),_("li",[t._v("用innerHTML代替DOM操作，"),_("strong",[t._v("减少DOM操作次数")]),t._v("，优化javascript性能。")]),t._v(" "),_("li",[t._v("当需要设置的样式很多时"),_("strong",[t._v("设置className而不是直接操作style")]),t._v("。")]),t._v(" "),_("li",[t._v("少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。")]),t._v(" "),_("li",[t._v("避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。")]),t._v(" "),_("li",[t._v("图片预加载，"),_("strong",[t._v("将样式表放在顶部，将脚本放在底部  加上时间戳")]),t._v("。")]),t._v(" "),_("li",[t._v("避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢。")])]),t._v(" "),_("h3",{attrs:{id:"雅虎性能优化【推荐】"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#雅虎性能优化【推荐】"}},[t._v("#")]),t._v(" 雅虎性能优化【推荐】")]),t._v(" "),_("h4",{attrs:{id:"页面内容"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#页面内容"}},[t._v("#")]),t._v(" "),_("strong",[t._v("页面内容")])]),t._v(" "),_("ul",[_("li",[_("p",[t._v("减少 HTTP 请求数")]),t._v(" "),_("ul",[_("li",[t._v("合并 JavaScript、CSS 等文件；")]),t._v(" "),_("li",[t._v("使用"),_("a",{attrs:{href:"http://alistapart.com/articles/sprites",target:"_blank",rel:"noopener noreferrer"}},[t._v("CSS Sprite"),_("OutboundLink")],1),t._v("：将背景图片合并成一个文件，通过"),_("code",[t._v("background-image")]),t._v(" 和 "),_("code",[t._v("background-position")]),t._v(" 控制显示；")]),t._v(" "),_("li",[_("a",{attrs:{href:"http://www.w3.org/TR/html401/struct/objects.html#h-13.6",target:"_blank",rel:"noopener noreferrer"}},[t._v("Image Map"),_("OutboundLink")],1),t._v("：合并图片，然后使用坐标映射不同的区域")]),t._v(" "),_("li",[t._v("Inline Assets：使用 "),_("a",{attrs:{href:"https://en.wikipedia.org/wiki/Data_URI_scheme",target:"_blank",rel:"noopener noreferrer"}},[t._v("Data URI scheme"),_("OutboundLink")],1),t._v(" 将图片嵌入 HTML 或者 CSS 中；或者将 CSS、JS、图片直接嵌入 HTML 中; "),_("strong",[t._v("未来的趋势是使用内嵌 SVG。")])]),t._v(" "),_("li",[_("a",{attrs:{href:"https://csspod.com/frontend-performance-best-practices/#content-domains",target:"_blank",rel:"noopener noreferrer"}},[t._v("内容分片"),_("OutboundLink")],1),t._v("，将请求划分到不同的域名上。")])])]),t._v(" "),_("li",[_("p",[t._v("减少 DNS 查询")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("首次访问、没有相应的 DNS 缓存时，域名越多，查询时间越长。所以应尽量减少域名数量。但基于并行下载考虑，"),_("strong",[t._v("把资源分布到 2 个域名上（最多不超过 4 个）")]),t._v("。这是"),_("strong",[t._v("减少 DNS 查询同时保证并行下载的折衷方案")]),t._v("。")])]),t._v(" "),_("li",[_("p",[t._v("预解析DNS；")]),t._v(" "),_("div",{staticClass:"language-html line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-html"}},[_("code",[_("span",{pre:!0,attrs:{class:"token tag"}},[_("span",{pre:!0,attrs:{class:"token tag"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),_("span",{pre:!0,attrs:{class:"token attr-value"}},[_("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("x-dns-prefetch-control"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),_("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),_("span",{pre:!0,attrs:{class:"token attr-value"}},[_("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("no"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token tag"}},[_("span",{pre:!0,attrs:{class:"token tag"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),_("span",{pre:!0,attrs:{class:"token attr-value"}},[_("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("dns-prefetch"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),_("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),_("span",{pre:!0,attrs:{class:"token attr-value"}},[_("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("//host_name_to_prefetch.com"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br")])])])])]),t._v(" "),_("li",[_("p",[t._v("避免重定向")]),t._v(" "),_("ul",[_("li",[t._v("客户端收到服务器的重定向响应后，会根据响应头中 "),_("code",[t._v("Location")]),t._v(" 的地址再次发送请求。重定向会影响用户体验，尤其是多次重定向时，用户在一段时间内看不到任何内容，只看到浏览器进度条一直在刷新。")]),t._v(" "),_("li",[t._v("有时重定向无法避免，在糟糕也比抛出 404 好。虽然通过 "),_("a",{attrs:{href:"https://en.wikipedia.org/wiki/Meta_refresh",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTML meta refresh"),_("OutboundLink")],1),t._v(" 和 JavaScript 也能实现，但首选 HTTP "),_("code",[t._v("3xx")]),t._v(" 跳转，以保证浏览器「后退」功能正常工作（也利于 SEO）。\n"),_("ul",[_("li",[t._v("最浪费的重定向经常发生、而且很容易被忽略：URL 末尾应该添加 "),_("code",[t._v("/")]),t._v(" 但未添加。")]),t._v(" "),_("li",[t._v("网站域名变更：CNAME 结合 "),_("code",[t._v("Alias")]),t._v(" 或 "),_("code",[t._v("mod_rewrite")]),t._v(" 或者其他服务器类似功能实现跳转。")])])])])]),t._v(" "),_("li",[_("p",[t._v("缓存 Ajax 请求")]),t._v(" "),_("ul",[_("li",[t._v("Ajax 可以提高用户体验。但「异步」不意味着「及时」，优化 Ajax 响应速度提高性能仍是需要关注的主题。")]),t._v(" "),_("li",[t._v("最重要的的优化方式是"),_("strong",[t._v("缓存响应结果")]),t._v("，详见 [添加 Expires 或 Cache-Control 响应头]")])])]),t._v(" "),_("li",[_("p",[t._v("延迟加载")])]),t._v(" "),_("li",[_("p",[t._v("预先加载")])]),t._v(" "),_("li",[_("p",[t._v("减少 DOM 元素数量")]),t._v(" "),_("ul",[_("li",[t._v("是否还在使用表格布局？  "),_("strong",[t._v("性能考量")]),t._v("，默认的表格布局算法会产生大量重绘")]),t._v(" "),_("li",[t._v("塞进去更多的 "),_("code",[t._v("<div>")]),t._v(" 仅为了处理布局问题？也许有更好、更语义化的标记。")]),t._v(" "),_("li",[t._v("能通过伪元素实现的功能，就没必要添加额外元素，如清除浮动。")])])]),t._v(" "),_("li",[_("p",[t._v("划分内容到不同域名")])]),t._v(" "),_("li",[_("p",[t._v("尽量减少 iframe 使用")])]),t._v(" "),_("li",[_("p",[t._v("避免 404 错误")]),t._v(" "),_("ul",[_("li",[t._v("HTTP 请求很昂贵，返回无效的响应（如 404 未找到）完全没必要，降低用户体验而且毫无益处。")])])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("定义字符集")])]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("定义字符集，并放在 "),_("code",[t._v("<head>")]),t._v(" 顶部")]),t._v("。大多数浏览器会暂停页面渲染，直到找到字符集定义。")])])])]),t._v(" "),_("h4",{attrs:{id:"服务器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#服务器"}},[t._v("#")]),t._v(" "),_("strong",[t._v("服务器")])]),t._v(" "),_("ul",[_("li",[t._v("参考配置： 服务器相关优化设置可参考 H5BP 相关项目：\n"),_("ul",[_("li",[_("a",{attrs:{href:"https://github.com/h5bp/server-configs-nginx",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nginx HTTP server boilerplate configs"),_("OutboundLink")],1),t._v(" 【推荐】")]),t._v(" "),_("li",[_("a",{attrs:{href:"https://github.com/h5bp/server-configs-apache",target:"_blank",rel:"noopener noreferrer"}},[t._v("Apache HTTP server boilerplate configs"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://github.com/h5bp/server-configs-iis",target:"_blank",rel:"noopener noreferrer"}},[t._v("IIS Web.Config Boilerplates"),_("OutboundLink")],1)])])]),t._v(" "),_("li",[t._v("使用 CDN\n"),_("ul",[_("li",[t._v("网站 80-90% 响应时间消耗在资源下载上，"),_("strong",[t._v("减少资源下载时间是性能优化的黄金发则")]),t._v("。")])])]),t._v(" "),_("li",[t._v("添加 Expires 或 Cache-Control 响应头\n"),_("ul",[_("li",[_("strong",[t._v("静态内容")]),t._v("：将 "),_("code",[t._v("Expires")]),t._v(" 响应头设置为将来很远的时间，实现「永不过期」策略；")]),t._v(" "),_("li",[_("strong",[t._v("动态内容")]),t._v("：设置合适的 "),_("code",[t._v("Cache-Control")]),t._v(" 响应头，让浏览器有条件地发起请求。")])])]),t._v(" "),_("li",[t._v("启用 Gzip； "),_("strong",[_("code",[t._v("gzip")]),t._v(" 使用了 "),_("code",[t._v("LZ77")]),t._v(" 算法与 "),_("code",[t._v("Huffman")]),t._v(" 编码来压缩文件")]),t._v("，重复度越高的文件可压缩的空间就越大。【gzip 的原理】\n"),_("ul",[_("li",[t._v("Gzip 压缩通常可以减少 70% 的响应大小，对某些文件更可能高达 90%，"),_("strong",[t._v("比 Deflate 更高效")]),t._v("。"),_("strong",[t._v("应该对 HTML、CSS、JS、XML、JSON 等文本类型的内容启用压缩。")])]),t._v(" "),_("li",[_("strong",[t._v("注意")]),t._v("，图片和 PDF 文件不要使用 gzip。它们本身已经压缩过，"),_("strong",[t._v("再使用 gzip 压缩不仅浪费 CPU 资源，而且还可能增加文件体积")]),t._v("。")]),t._v(" "),_("li",[t._v("对于不支持的 Gzip 的用户代理，通过设置 Vary 响应头，返回为未压缩的数据："),_("code",[t._v("Vary: *")])])])]),t._v(" "),_("li",[t._v("配置 Etag\n"),_("ul",[_("li",[t._v("Etag 通过文件版本标识，方便服务器判断请求的内容是否有更新，如果没有就响应 "),_("code",[t._v("304")]),t._v("，避免重新下载。")])])]),t._v(" "),_("li",[t._v("尽早输出缓冲")]),t._v(" "),_("li",[t._v("Ajax 请求使用 GET 方法\n"),_("ul",[_("li",[t._v("浏览器执行 XMLHttpRequest POST 请求时分成两步，先发送 Header，再发送数据。而 GET 只使用一个 TCP 数据包发送数据，所以首选 GET 方法。")])])]),t._v(" "),_("li",[t._v("避免图片 src 为空\n"),_("ul",[_("li",[t._v("空 "),_("code",[t._v("src")]),t._v(" 请求的后果不容小觑： "),_("code",[t._v('<img src="" /> var img = new Image(); img.src = "";')]),t._v(" "),_("ul",[_("li",[t._v("给服务器造成意外的流量负担，尤其时日 PV 较大时；")]),t._v(" "),_("li",[t._v("浪费服务器计算资源；")]),t._v(" "),_("li",[t._v("可能产生报错。")])])])])])]),t._v(" "),_("h4",{attrs:{id:"cookie"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[t._v("#")]),t._v(" "),_("strong",[t._v("Cookie")])]),t._v(" "),_("ul",[_("li",[t._v("减少 Cookie 大小\n"),_("ul",[_("li",[t._v("Cookie 通过 HTTP 头在服务器和浏览器间来回传送，减少 Cookie 大小可以降低其对响应速度的影响。\n"),_("ul",[_("li",[t._v("去除不必要的 Cookie；")]),t._v(" "),_("li",[t._v("尽量压缩 Cookie 大小；")]),t._v(" "),_("li",[t._v("注意设置 Cookie 的 domain 级别，如无必要，不要影响到 sub-domain；")]),t._v(" "),_("li",[t._v("设置合适的过期时间。")])])])])]),t._v(" "),_("li",[t._v("静态资源使用无 Cookie 域名\n"),_("ul",[_("li",[t._v("静态资源一般无需使用 Cookie，可以把它们放在使用二级域名或者专门域名的无 Cookie 服务器上，降低 Cookie 传送的造成的流量浪费，提高响应速度。")])])])]),t._v(" "),_("h4",{attrs:{id:"css"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#css"}},[t._v("#")]),t._v(" "),_("strong",[t._v("CSS")])]),t._v(" "),_("ul",[_("li",[t._v("把样式表放在 "),_("code",[t._v("<head>")]),t._v(" 中\n"),_("ul",[_("li",[t._v("如果把样式表放在页面底部，"),_("strong",[t._v("一些浏览器为减少重绘，会在 CSS 加载完成以后才渲染页面")]),t._v("，用户只能对着白屏干瞪眼，用户体验极差。")])])]),t._v(" "),_("li",[t._v("不要使用 CSS 表达式\n"),_("ul",[_("li",[t._v("CSS 表达式超出预期的频繁执行，页面滚动、鼠标移动时都会不断执行，带来很大的性能损耗。")])])]),t._v(" "),_("li",[t._v("使用 "),_("code",[t._v("<link>")]),t._v(" 替代 "),_("code",[t._v("@import")]),t._v(" "),_("ul",[_("li",[t._v("对于 IE 某些版本，"),_("code",[t._v("@import")]),t._v(" 的行为和 `` 放在页面底部一样。所以，不要用它。")])])]),t._v(" "),_("li",[t._v("不要使用 filter\n"),_("ul",[_("li",[_("code",[t._v("AlphaImageLoader")]),t._v(" 为 IE5.5-IE8 专有的技术，和 CSS 表达式一样，放进博物馆吧。注意： 这里所说的不是 "),_("a",{attrs:{href:"https://www.w3.org/TR/filter-effects-1/",target:"_blank",rel:"noopener noreferrer"}},[t._v("CSS3 Filter"),_("OutboundLink")],1),t._v("，")])])])]),t._v(" "),_("h4",{attrs:{id:"javascript"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#javascript"}},[t._v("#")]),t._v(" "),_("strong",[t._v("JavaScript")])]),t._v(" "),_("ul",[_("li",[_("p",[t._v("把脚本放在页面底部")]),t._v(" "),_("ul",[_("li",[t._v("浏览器"),_("strong",[t._v("下载脚本时，会阻塞其他资源并行下载，即使是来自不同域名的资源")]),t._v("。因此，最好将脚本放在底部，以提高页面加载速度。 "),_("strong",[t._v("一些特殊场景无法将脚本放到页面底部的，可以考虑 "),_("code",[t._v("<script>")]),t._v(" 的以下属性")]),t._v("：\n"),_("ul",[_("li",[_("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement#defer_property",target:"_blank",rel:"noopener noreferrer"}},[_("code",[t._v("defer")]),t._v(" 属性"),_("OutboundLink")],1),t._v("；")]),t._v(" "),_("li",[t._v("HTML5 新增的 "),_("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement#async_property",target:"_blank",rel:"noopener noreferrer"}},[_("code",[t._v("async")]),t._v(" 属性"),_("OutboundLink")],1),t._v("。")])])])])]),t._v(" "),_("li",[_("p",[t._v("使用外部 JavaScript 和 CSS")]),t._v(" "),_("ul",[_("li",[t._v("外部 JavaScript 和 CSS 文件可以被浏览器缓存，在不同页面间重用，也能降低页面大小。")]),t._v(" "),_("li",[t._v("当然，实际中也需要考虑代码的重用程度。如果仅仅是某个页面使用到的代码，可以考虑内嵌在页面中，减少 HTTP 请求数。另外，可以在首页加载完成以后，预先加载子页面的资源。")])])]),t._v(" "),_("li",[_("p",[t._v("压缩 JavaScript 和 CSS")]),t._v(" "),_("ul",[_("li",[t._v("压缩代码可以移除非功能性的字符（注释、空格、空行等），减少文件大小，提高载入速度。Gulp、Webpack 等流行构建工具的配套版本")])])]),t._v(" "),_("li",[_("p",[t._v("移除重复脚本")])]),t._v(" "),_("li",[_("p",[t._v("减少 DOM 操作")]),t._v(" "),_("ul",[_("li",[t._v("缓存已经访问过的元素；")]),t._v(" "),_("li",[t._v("使用 "),_("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Document/createDocumentFragment",target:"_blank",rel:"noopener noreferrer"}},[t._v("DocumentFragment"),_("OutboundLink")],1),t._v(" 暂存 DOM，整理好以后再插入 DOM 树；")]),t._v(" "),_("li",[_("strong",[t._v("操作 className，而不是多次读写 "),_("code",[t._v("style")]),t._v("；")])]),t._v(" "),_("li",[t._v("避免使用 JavaScript 修复布局。")])])]),t._v(" "),_("li",[_("p",[t._v("使用高效的事件处理")]),t._v(" "),_("ul",[_("li",[t._v("减少绑定事件监听的节点，如通过事件委托；")]),t._v(" "),_("li",[t._v("尽早处理事件，"),_("strong",[t._v("在 "),_("code",[t._v("DOMContentLoaded")]),t._v(" 即可进行，不用等到 "),_("code",[t._v("load")]),t._v(" 以后")]),t._v("。")])]),t._v(" "),_("blockquote",[_("p",[t._v("对于 "),_("code",[t._v("resize")]),t._v("、"),_("code",[t._v("scroll")]),t._v(" 等触发频率极高的事件，"),_("strong",[t._v("应该通过 debounce 等机制降低处理程序执行频率。")])])])])]),t._v(" "),_("h4",{attrs:{id:"图片"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#图片"}},[t._v("#")]),t._v(" "),_("strong",[t._v("图片")])]),t._v(" "),_("ul",[_("li",[_("p",[t._v("优化图片")]),t._v(" "),_("ul",[_("li",[t._v("PNG 终极优化；")]),t._v(" "),_("li",[t._v("Webp 相关内容；")]),t._v(" "),_("li",[t._v("SVG 相关内容。")])])]),t._v(" "),_("li",[_("p",[t._v("优化 CSS Sprite")]),t._v(" "),_("ul",[_("li",[t._v("水平排列 Sprite 中的图片，"),_("strong",[t._v("垂直排列会增加图片大小")]),t._v("；")]),t._v(" "),_("li",[t._v("Spirite 中把颜色"),_("strong",[t._v("较近的组合在一起可以降低颜色数")]),t._v("，理想状况是低于 256 色以适用 PNG8 格式；")]),t._v(" "),_("li",[t._v("不要在 Spirite 的图像中间留有较大空隙。减少空隙虽然不太影响文件大小，但可以降低用户代理把图片解压为像素图的内存消耗，对移动设备更友好。")])])]),t._v(" "),_("li",[_("p",[t._v("不要在 HTML 中缩放图片")]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("不要使用 "),_("code",[t._v("<img>")]),t._v(" 的 "),_("code",[t._v("width")]),t._v("、"),_("code",[t._v("height")]),t._v(" 缩放图片")]),t._v("，如果用到小图片，就使用相应大小的图片。")]),t._v(" "),_("blockquote",[_("p",[t._v("很多 CMS 和 CDN 都提供图片裁切功能。")])])])])]),t._v(" "),_("li",[_("p",[t._v("使用体积小、可缓存的 favicon.ico")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("Favicon.ico 一般存放在网站根目录下，"),_("strong",[t._v("无论是否在页面中设置，浏览器都会尝试请求这个文件")]),t._v("。")]),t._v(" "),_("p",[t._v("所以确保这个图标：")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("存在（避免 404）；")])]),t._v(" "),_("li",[_("strong",[t._v("尽量小，最好小于 1K；")])]),t._v(" "),_("li",[_("strong",[t._v("设置较长的过期时间。")])])]),t._v(" "),_("blockquote",[_("p",[t._v("对于较新的浏览器，可以使用 PNG 格式的 favicon。")])])])])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("设置图片的宽和高")])]),t._v(" "),_("ul",[_("li",[t._v("以免浏览器按照「猜」的宽高给图片保留的区域和实际宽高差异，产生重绘。")])])])]),t._v(" "),_("h4",{attrs:{id:"移动端"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#移动端"}},[t._v("#")]),t._v(" "),_("strong",[t._v("移动端")])]),t._v(" "),_("ul",[_("li",[t._v("保持单个文件小于 25 KB")]),t._v(" "),_("li",[t._v("打包内容为分段（multipart）文档")])]),t._v(" "),_("h2",{attrs:{id:"其他相关"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#其他相关"}},[t._v("#")]),t._v(" 其他相关")]),t._v(" "),_("h3",{attrs:{id:"懒加载和预加载的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#懒加载和预加载的区别"}},[t._v("#")]),t._v(" 懒加载和预加载的区别")]),t._v(" "),_("blockquote",[_("p",[t._v("图片的懒加载和预加载")])]),t._v(" "),_("p",[t._v("预加载：提前加载图片，当用户需要查看时可直接从本地缓存中渲染。")]),t._v(" "),_("p",[t._v("懒加载：懒加载的主要目的是作为服务器前端的优化，减少请求数或延迟请求数。")]),t._v(" "),_("p",[t._v("两种技术的本质：两者的行为是相反的，"),_("strong",[t._v("一个是提前加载，一个是迟缓甚至不加载")]),t._v("。 懒加载对服务器前端有一定的缓解压力作用，预加载则会增加服务器前端压力。")]),t._v(" "),_("h3",{attrs:{id:"减少页面加载时间的方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#减少页面加载时间的方法"}},[t._v("#")]),t._v(" 减少页面加载时间的方法")]),t._v(" "),_("ul",[_("li",[t._v("服务器开启gzip压缩; CDN(Content Delivery Network)网络加速;")]),t._v(" "),_("li",[t._v("css样式的定义放置在文件头部;")]),t._v(" "),_("li",[t._v("Javascript脚本放在文件末尾;")]),t._v(" "),_("li",[t._v("压缩合并Javascript、CSS代码;")]),t._v(" "),_("li",[t._v("尽量减少页面中重复的HTTP请求数量;  【减少Http的请求】(合并文件，合并图片）")]),t._v(" "),_("li",[t._v("使用多域名负载网页内的多个文件、图片;")]),t._v(" "),_("li",[t._v("网址后面加上“/”:对服务器而言，不加斜杠服务器会多一次判断的过程，加斜杠就会直接返回网站设置的存放在网站根目录下的默认页面。")])]),t._v(" "),_("h2",{attrs:{id:"参考链接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[t._v("#")]),t._v(" 参考链接")]),t._v(" "),_("p",[t._v("https://blog.csdn.net/XIAOZHUXMEN/article/details/52014901")]),t._v(" "),_("p",[t._v("https://csspod.com/frontend-performance-best-practices")]),t._v(" "),_("p",[t._v("https://developer.yahoo.com/performance/rules.html")])])}),[],!1,null,null,null);v.default=s.exports}}]);