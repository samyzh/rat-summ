(window.webpackJsonp=window.webpackJsonp||[]).push([[456],{2167:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"三大范式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三大范式"}},[t._v("#")]),t._v(" 三大范式")]),t._v(" "),a("p",[t._v("第一范式\t"),a("strong",[t._v("每一列不可分，字段原子性，简称１NF")]),t._v("\n第二范式\t"),a("strong",[t._v("不存在部分依赖，消除对主键的部分依赖，简称２NF")]),t._v("\n第三范式\t"),a("strong",[t._v("不存在传递依赖，消除对主键的传递依赖，简称３NF")])]),t._v(" "),a("p",[a("strong",[t._v("第一范式（1NF）")]),t._v("：数据库表中的字段都是单一属性的，不可再分。这个单一属性由基本类型构成，包括整型、实数、字符型、逻辑型、日期型等。")]),t._v(" "),a("p",[a("strong",[t._v("第二范式（2NF）")]),t._v("：数据库表中不存在非关键字段对任一候选关键字段的部分函数依赖（部分函数依赖指的是存在组合关键字中的某些字段决定非关键字段的情况），也即所有非关键字段都完全依赖于任意一组候选关键字。")]),t._v(" "),a("p",[a("strong",[t._v("第三范式（3NF）")]),t._v("：在第二范式的基础上，数据表中如果不存在非关键字段对任一候选关键字段的传递函数依赖则符合第三范式。")]),t._v(" "),a("p",[t._v("上面的文字我们肯定是看不懂的，也不愿意看下去的。接下来我就总结一下：")]),t._v(" "),a("p",[t._v("首先要明确的是："),a("strong",[t._v("满足着第三范式，那么就一定满足第二范式、满足着第二范式就一定满足第一范式")])]),t._v(" "),a("ul",[a("li",[t._v("第一范式："),a("strong",[t._v("字段是最小的的单元不可再分")]),t._v("；比如：学生信息组成学生信息表，有年龄、性别、学号等信息组成。这些字段都不可再分，所以它是满足第一范式的")]),t._v(" "),a("li",[t._v("第二范式：满足第一范式,"),a("strong",[t._v("表中的字段必须完全依赖于全部主键而非部分主键")]),t._v("；其他字段组成的这行记录和主键表示的是同一个东西，而主键是唯一的，它们只需要依赖于主键，也就成了唯一的"),a("strong",[t._v("学号为1024的同学，姓名为Java3y，年龄是22岁。姓名和年龄字段都依赖着学号主键。")])]),t._v(" "),a("li",[t._v("**第三范式：满足第二范式，**非主键外的所有字段必须互不依赖就是数据只在一个地方存储，不重复出现在多张表中，可以认为就是消除传递依赖\n"),a("ul",[a("li",[t._v("比如，我们大学分了很多系（中文系、英语系、计算机系……），这个系别管理表信息有以下字段组成：系编号，系主任，系简介，系架构。那我们能不能在学生信息表添加系编号，系主任，系简介，系架构字段呢？不行的，因为这样就冗余了，非主键外的字段形成了依赖关系(依赖到学生信息表了)！正确的做法是：学生表就只能增加一个系编号字段。")])])])]),t._v(" "),a("h2",{attrs:{id:"sql约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql约束"}},[t._v("#")]),t._v(" SQL约束")]),t._v(" "),a("p",[a("strong",[t._v("SQL 约束种类")]),t._v(":  "),a("em",[t._v("主键，外键，非空，唯一约束，检查约束")]),t._v("；(5种)")]),t._v(" "),a("ul",[a("li",[t._v("PRIMARY KEY: 也是用于控件字段内容不能重复，但它在一个表只允许出现一个。")]),t._v(" "),a("li",[t._v("FOREIGN KEY: 用于预防破坏表之间连接的动作，也能防止非法数据插入外键列，因为它必须是它指向的那个表中的值之一。")]),t._v(" "),a("li",[t._v("NOT NULL: 用于控制字段的内容一定不能为空（NULL）。")]),t._v(" "),a("li",[t._v("UNIQUE: 控件字段内容不能重复，一个表允许有多个 Unique 约束。")]),t._v(" "),a("li",[t._v("CHECK: 用于控制字段的值范围。")])]),t._v(" "),a("h2",{attrs:{id:"存储过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储过程"}},[t._v("#")]),t._v(" 存储过程")]),t._v(" "),a("blockquote",[a("p",[t._v("简介："),a("strong",[t._v("就像我们编程语言中的函数一样，封装了我们的代码(PLSQL、T-SQL)")])]),t._v(" "),a("ul",[a("li",[t._v("为以后的使用保存的一条或多条MySQL语句的集合，因此也可以在存储过程中加入业务逻辑和流程。")]),t._v(" "),a("li",[t._v("可以在存储过程中创建表，更新数据，删除数据等等。")])])]),t._v(" "),a("h3",{attrs:{id:"优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),a("ul",[a("li",[t._v("能够将代码封装起来")]),t._v(" "),a("li",[t._v("保存在数据库之中；让编程语言进行调用")]),t._v(" "),a("li",[t._v("存储过程是一个预编译的代码块，执行效率比较高")]),t._v(" "),a("li",[t._v("一个存储过程替代大量T_SQL语句 ，可以降低网络通信量，提高通信速率")]),t._v(" "),a("li",[t._v("可以通过把SQL语句封装在容易使用的单元中，简化复杂的操作")]),t._v(" "),a("li",[t._v("可以保证数据的一致性；简化对变动的管理")])]),t._v(" "),a("h3",{attrs:{id:"缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),a("ul",[a("li",[t._v("每个数据库的存储过程语法几乎都不一样，十分难以维护（不通用）")]),t._v(" "),a("li",[t._v("业务逻辑放在数据库上，难以迭代")])]),t._v(" "),a("h2",{attrs:{id:"触发器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#触发器"}},[t._v("#")]),t._v(" 触发器")]),t._v(" "),a("blockquote",[a("p",[t._v("提供给程序员和数据分析员来保证数据完整性的一种方法，"),a("strong",[t._v("它是与表事件相关的特殊的存储过程")]),t._v("。\n触发器是指一段代码，当触发某个事件时，自动执行这些代码。")])]),t._v(" "),a("p",[t._v("在MySQL数据库中有如下"),a("strong",[t._v("六种触发器")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("1、Before Insert")]),t._v(" "),a("li",[t._v("2、After Insert")]),t._v(" "),a("li",[t._v("3、Before Update")]),t._v(" "),a("li",[t._v("4、After Update")]),t._v(" "),a("li",[t._v("5、Before Delete")]),t._v(" "),a("li",[t._v("6、After Delete")])]),t._v(" "),a("h2",{attrs:{id:"视图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#视图"}},[t._v("#")]),t._v(" 视图")]),t._v(" "),a("blockquote",[a("p",[t._v("视图提供数据内容的语句为 SELECT 语句,可以将视图理解为存储起来的 SELECT 语句")]),t._v(" "),a("p",[t._v("**视图就是基于查询的一种虚表，也就是说，视图可以将查询出来的数据进行封装。。。**那么我们在使用的时候就会变得非常方便...")]),t._v(" "),a("p",[t._v("值得注意的是："),a("strong",[t._v("使用视图可以让我们专注与逻辑，但不提高查询效率")])])]),t._v(" "),a("h2",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),a("p",[t._v("MySQL支持多种类型，大致可以分为三类："),a("code",[t._v("数值")]),t._v("、"),a("code",[t._v("日期/时间")]),t._v("和"),a("code",[t._v("字符串(字符)")]),t._v("类型。")]),t._v(" "),a("p",[a("em",[a("strong",[t._v("varchar(50)中50的含义")])]),t._v("\n最多存放50个字符，varchar(50)和(200)存储hello所占空间一样，但"),a("strong",[t._v("后者在排序时会消耗更多内存")]),t._v("，因为order by col采用fixed_length计算col长度(memory引擎也一样)。")]),t._v(" "),a("p",[a("em",[a("strong",[t._v("int(20)中20的含义")])]),t._v("\n是指显示字符的长度，不影响内部存储，只是当定义了ZEROFILL时，前面补多少个 0")]),t._v(" "),a("p",[a("em",[a("strong",[t._v("MySQL数据类型表达的意义（int(0)、char(16)、varchar(16)、datetime、text）")])])]),t._v(" "),a("p",[a("code",[t._v("int(0)")]),t._v("表示数据是INT类型，长度是0; "),a("code",[t._v("char(16)")]),t._v("表示固定长度字符串，长度为16; "),a("code",[t._v("varchar(16)")]),t._v("表示可变长度字符串，长度为16;")]),t._v(" "),a("p",[a("code",[t._v("datetime")]),t._v("表示时间类型; "),a("code",[t._v("text")]),t._v("表示字符串类型，能存储大字符串，最多存储65535字节数据）")]),t._v(" "),a("h4",{attrs:{id:"varchar和text的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#varchar和text的区别"}},[t._v("#")]),t._v(" varchar和text的区别")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("varchar可指定字符数，text不能指定")]),t._v("，内部存储"),a("em",[t._v("varchar是存入的实际字符数+1个字节（n<=255）或2个字节(n>255)，text是实际字符数+2个字节")]),t._v("。")]),t._v(" "),a("li",[t._v("text类型不能有默认值。")]),t._v(" "),a("li",[t._v("varchar可直接创建索引，text创建索引要指定前多少个字符。")]),t._v(" "),a("li",[a("strong",[t._v("varchar查询速度快于text,在都创建索引的情况下，text的索引几乎不起作用")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("查询text需要创建临时表")]),t._v("。")])]),t._v(" "),a("p",[a("strong",[t._v("临时表")]),t._v("：")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("MySQL 临时表")]),t._v("在我们需要保存一些临时数据时是非常有用的。临时表只在当前连接可见，当关闭连接时，Mysql会自动删除表并释放所有空间")])]),t._v(" "),a("p",[t._v("默认情况下，当你断开与数据库的连接后，临时表就会自动被销毁。当然你也可以在当前MySQL会话使用 "),a("strong",[t._v("DROP TABLE")]),t._v(" 命令来手动删除临时表。")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TEMPORARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" SalesSummary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" SalesSummary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h4",{attrs:{id:"float和double的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#float和double的区别"}},[t._v("#")]),t._v(" float和double的区别")]),t._v(" "),a("ul",[a("li",[t._v("FLOAT类型数据可以存储"),a("strong",[t._v("至多8位十进制数")]),t._v("，并在内存中"),a("strong",[t._v("占4字节")]),t._v("。")]),t._v(" "),a("li",[t._v("DOUBLE类型数据可以存储"),a("strong",[t._v("至多18位十进制数")]),t._v("，并在内存中"),a("strong",[t._v("占8字节")]),t._v("。")]),t._v(" "),a("li",[t._v("//"),a("code",[t._v("TINYINT")]),t._v("、"),a("code",[t._v("SMALLINT")]),t._v("、"),a("code",[t._v("MEDIUMINT")]),t._v("、"),a("code",[t._v("INT")]),t._v("、"),a("code",[t._v("BIGINT")]),t._v("，分别表示"),a("code",[t._v("1")]),t._v("、"),a("code",[t._v("2")]),t._v("、"),a("code",[t._v("3")]),t._v("、"),a("code",[t._v("4")]),t._v("、"),a("code",[t._v("8")]),t._v("字节整数。")]),t._v(" "),a("li",[t._v("float和double求SUM的结果都是不精确的，"),a("strong",[t._v("只有decimal求SUM得到的是精准数值：")]),t._v("\n所以，"),a("strong",[t._v("decimal 类型是适合财务和货币计算的128位数据类型。")])])]),t._v(" "),a("h4",{attrs:{id:"delete、truncate与drop的使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delete、truncate与drop的使用场景"}},[t._v("#")]),t._v(" delete、truncate与drop的使用场景")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("DELETE是一条一条记录的删除，而Truncate是将整个表删除，保留表结构，这样比DELETE快;")])])]),t._v(" "),a("ul",[a("li",[t._v("想删除部分数据行时候，用delete，并且带上where子句")]),t._v(" "),a("li",[t._v("保留表而删除所有数据的时候用truncate")]),t._v(" "),a("li",[t._v("不再需要一张表的时候，用drop")])]),t._v(" "),a("h4",{attrs:{id:"alter、change、modify的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#alter、change、modify的区别"}},[t._v("#")]),t._v(" ALTER、CHANGE、MODIFY的区别")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--ALTER COLUMN：设置或删除列的默认值（操作速度非常快） 例子：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("alter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" film "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("alter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("column")]),t._v(" rental_duration "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("alter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" film "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("alter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("column")]),t._v(" rental_duration "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("drop")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--CHANGE COLUMN：列的重命名、列类型的变更以及列位置的移动 例子：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" MyTable CHANGE "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLUMN")]),t._v(" foo bar "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FIRST")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" MyTable CHANGE "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLUMN")]),t._v(" foo bar "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AFTER")]),t._v(" baz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--MODIFY COLUMN：除了不能给列重命名之外，他干的活和CHANGE COLUMN是一样的 例子：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" MyTable "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MODIFY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLUMN")]),t._v(" foo "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AFTER")]),t._v(" baz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--示例：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" test "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MODIFY")]),t._v(" f "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FLOAT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" test "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MODIFY")]),t._v(" d "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DOUBLE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("de"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.234")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.234")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.234")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("h4",{attrs:{id:"设置序列的开始值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置序列的开始值"}},[t._v("#")]),t._v(" 设置序列的开始值")]),t._v(" "),a("blockquote",[a("p",[t._v("一般情况下序列的开始值为1，但如果你需要指定一个开始值100，那我们可以通过以下语句来实现：")])]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[t._v("mysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" insect\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNSIGNED")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AUTO_INCREMENT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("date")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" origin "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("engine")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("innodb")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto_increment")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("charset")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--或者你也可以在表创建成功后，通过以下语句来实现：")]),t._v("\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AUTO_INCREMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("h5",{attrs:{id:"重置序列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重置序列"}},[t._v("#")]),t._v(" 重置序列")]),t._v(" "),a("blockquote",[a("p",[t._v("如果你删除了数据表中的多条记录，并希望对剩下数据的AUTO_INCREMENT列进行重新排列，那么你可以通过删除自增的列，然后重新添加来实现。\n不过该操作要非常小心，"),a("strong",[t._v("如果在删除的同时又有新记录添加，有可能会出现数据混乱")]),t._v("。操作如下所示：")])]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[t._v("mysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" insect "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" insect\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNSIGNED")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AUTO_INCREMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FIRST")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h2",{attrs:{id:"编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编码"}},[t._v("#")]),t._v(" 编码")]),t._v(" "),a("h4",{attrs:{id:"查看修改数据库、表、字段编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看修改数据库、表、字段编码"}},[t._v("#")]),t._v(" 查看修改数据库、表、字段编码")]),t._v(" "),a("p",[a("strong",[t._v("character_set_results：结果集的字符集。")])]),t._v(" "),a("p",[a("strong",[t._v("character_set_server：数据库服务器的默认字符集。")])]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("show")]),t._v(" variables "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("like")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'character%'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("show")]),t._v(" variables "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("like")]),t._v(" ‘collation"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("’"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" @"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@character_set_database")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" @"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@collation_database")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 数据库中的表中修改；")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DATABASE")]),t._v(" blog "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHARACTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" utf8mb4 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLLATE")]),t._v(" utf8mb4_unicode_ci"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 全局替换数据库格式；")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" etag_dev "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONVERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TO")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHARACTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" utf8 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLLATE")]),t._v(" utf8_general_ci"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" etag_dev "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONVERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TO")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHARACTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" utf8mb4 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLLATE")]),t._v(" utf8mb4_unicode_ci"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("h2",{attrs:{id:"查询语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询语句"}},[t._v("#")]),t._v(" 查询语句")]),t._v(" "),a("h3",{attrs:{id:"六种关联查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六种关联查询"}},[t._v("#")]),t._v(" 六种关联查询")]),t._v(" "),a("ul",[a("li",[t._v("交叉连接（CROSS JOIN）")]),t._v(" "),a("li",[t._v("内连接（INNER JOIN）")]),t._v(" "),a("li",[t._v("外连接（LEFT JOIN/RIGHT JOIN）")]),t._v(" "),a("li",[t._v("联合查询（UNION与UNION ALL）")]),t._v(" "),a("li",[t._v("全连接（FULL JOIN）")]),t._v(" "),a("li",[t._v("交叉连接（CROSS JOIN）")])]),t._v(" "),a("p",[a("em",[a("strong",[t._v("内连接分为三类")])])]),t._v(" "),a("ul",[a("li",[t._v("等值连接：ON A.id=B.id")]),t._v(" "),a("li",[t._v("不等值连接：ON A.id > B.id")]),t._v(" "),a("li",[t._v("自连接：SELECT * FROM A T1 INNER JOIN A T2 ON T1.id=T2.pid")])]),t._v(" "),a("p",[a("em",[a("strong",[t._v("外连接（LEFT JOIN/RIGHT JOIN）")])])]),t._v(" "),a("ul",[a("li",[t._v("左外连接：LEFT OUTER JOIN, 以左表为主，先查询出左表，按照ON后的关联条件匹配右表，没有匹配到的用NULL填充，可以简写成LEFT JOIN")]),t._v(" "),a("li",[t._v("右外连接：RIGHT OUTER JOIN, 以右表为主，先查询出右表，按照ON后的关联条件匹配左表，没有匹配到的用NULL填充，可以简写成RIGHT JOIN")])]),t._v(" "),a("p",[a("em",[a("strong",[t._v("联合查询（UNION与UNION ALL）")])])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT * FROM A UNION SELECT * FROM B UNION ...\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ul",[a("li",[t._v("就是把多个结果集集中在一起，UNION前的结果为基准，需要注意的是联合查询的列数要相等，相同的记录行会合并")]),t._v(" "),a("li",[t._v("如果使用UNION ALL，不会合并重复的记录行")]),t._v(" "),a("li",[t._v("效率 UNION 高于 UNION ALL")])]),t._v(" "),a("p",[a("em",[a("strong",[t._v("全连接（FULL JOIN）")])])]),t._v(" "),a("ul",[a("li",[t._v("MySQL不支持全连接")]),t._v(" "),a("li",[t._v("可以使用LEFT JOIN 和UNION和RIGHT JOIN联合使用")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT * FROM A LEFT JOIN B ON A.id=B.id UNION SELECT * FROM A RIGHT JOIN B ON A.id=B.id\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("em",[a("strong",[t._v("嵌套查询")])]),t._v(" 用一条SQL语句得结果作为另外一条SQL语句得条件，效率不好把握； SELECT * FROM A WHERE id IN (SELECT id FROM B)")]),t._v(" "),a("h3",{attrs:{id:"mysql关联查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql关联查询"}},[t._v("#")]),t._v(" mysql关联查询")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("关联查询(内连接，外连接，自连接)")])])]),t._v(" "),a("p",[t._v("JOIN 按照功能大致分为如下三类：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("INNER JOIN（内连接,或等值连接）")]),t._v("：获取两个表中字段匹配关系的记录。"),a("strong",[t._v("MySQL的INNER JOIN(也可以省略 INNER 使用 JOIN，效果一样)")])]),t._v(" "),a("li",[t._v("**LEFT JOIN（左[外]连接）：**获取左表所有记录，即使右表没有对应匹配的记录。")]),t._v(" "),a("li",[t._v("**RIGHT JOIN（右[**外]"),a("strong",[t._v("连接）：")]),t._v(" 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。")])]),t._v(" "),a("p",[t._v("关键字是left outer join，等效于left join，"),a("strong",[t._v("在关联查询中，做外连接查询就是左连接查询，两者是一个概念")])]),t._v(" "),a("p",[t._v("sql示例：")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--INNER JOIN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("runoob_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("runoob_author"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("runoob_count "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" runoob_tbl a "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INNER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" tcount_tbl b "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("runoob_author "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("runoob_author"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--以上 SQL 语句等价于：where语句；")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("runoob_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("runoob_author"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("runoob_count "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" runoob_tbl a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tcount_tbl b "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("runoob_author "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("runoob_author"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--LEFT JOIN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("runoob_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("runoob_author"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("runoob_count "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" runoob_tbl a "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEFT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" tcount_tbl b "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("runoob_author "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("runoob_author"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--RIGHT JOIN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("runoob_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("runoob_author"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("runoob_count "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" runoob_tbl a "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RIGHT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" tcount_tbl b "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("runoob_author "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("runoob_author"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("图示：\n"),a("code",[t._v("![](~/16-21-11.jpg)")])]),t._v(" "),a("p",[a("strong",[t._v("全外连接")]),t._v("\n顾名思义，把两张表的字段都查出来，没有对应的值就显示null，但是注意："),a("strong",[t._v("mysql是没有全外连接的(mysql中没有full outer join关键字)")]),t._v("，想要达到全外连接的效果，"),a("strong",[t._v("可以使用union关键字连接左外连接和右外连接")]),t._v("。如果"),a("code",[t._v("在oracle中，直接就使用full outer join关键字连接两表就行了")]),t._v(",例如：\n"),a("code",[t._v("![](~/16-24-33.jpg)")])]),t._v(" "),a("p",[a("strong",[t._v("自连接查询")]),t._v(" "),a("strong",[t._v("自连接查询就是当前表与自身的连接查询，关键点在于虚拟化出一张表给一个别名")]),t._v("\n例如：查询员工以及他的上司的名称，由于上司也是员工，所以这里虚拟化出一张上司表；")]),t._v(" "),a("p",[t._v("后面的四个字段就是虚拟化出的b表的所有记录，但看这四个字段其实就是记录所有是上司的员工的信息\n所以，"),a("strong",[t._v("自连接查询一般用作表中的某个字段的值是引用另一个字段的值，比如权限表中，父权限也属于权限。")]),t._v(" "),a("code",[t._v("![](~/16-25-00.jpg) ![](~/16-25-34.jpg)")])]),t._v(" "),a("h3",{attrs:{id:"union-操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#union-操作符"}},[t._v("#")]),t._v(" UNION 操作符")]),t._v(" "),a("p",[t._v("MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。\nUNION 语句：用于将不同表中相同列中查询的数据展示出来；"),a("strong",[t._v("（不包括重复数据）")]),t._v("\nUNION ALL 语句：用于将不同表中相同列中查询的数据展示出来；"),a("strong",[t._v("（包括重复数据")]),t._v("）\n使用形式如下：\nSELECT 列名称 FROM 表名称 UNION SELECT 列名称 FROM 表名称 ORDER BY 列名称；\nSELECT 列名称 FROM 表名称 UNION ALL SELECT 列名称 FROM 表名称 ORDER BY 列名称；\n"),a("code",[t._v("![](~/16-26-45.jpg)")])]),t._v(" "),a("p",[t._v("**注释：**UNION 不能用于列出两个表中所有的country。如果一些网站和APP来自同一个国家，每个国家只会列出一次。"),a("strong",[t._v("UNION 只会选取不同的值。请使用 UNION ALL 来选取重复的值")]),t._v("！")]),t._v(" "),a("h3",{attrs:{id:"union与union-all的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#union与union-all的区别"}},[t._v("#")]),t._v(" UNION与UNION ALL的区别")]),t._v(" "),a("ul",[a("li",[t._v("如果使用UNION ALL，不会合并重复的记录行")]),t._v(" "),a("li",[t._v("效率 UNION 高于 UNION ALL")])]),t._v(" "),a("h2",{attrs:{id:"存储引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储引擎"}},[t._v("#")]),t._v(" 存储引擎")]),t._v(" "),a("h3",{attrs:{id:"分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[t._v("#")]),t._v(" 分类")]),t._v(" "),a("p",[t._v("常用的存储引擎有以下：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Innodb引擎")]),t._v("，Innodb引擎提供了"),a("strong",[t._v("对数据库ACID事务的支持")]),t._v("。并且还提供了"),a("strong",[t._v("行级锁和外键的约束")]),t._v("。它的设计的目标就是处理大数据容量的数据库系统。")]),t._v(" "),a("li",[a("strong",[t._v("MyIASM引擎")]),t._v("(原本Mysql的默认引擎),不提供事务的支持，也不支持行级锁和外键。")]),t._v(" "),a("li",[a("strong",[t._v("MEMORY引擎")]),t._v("：所有的数据都在内存中，数据的处理速度快，但是安全性不高。")])]),t._v(" "),a("p",[a("strong",[t._v("其他引擎")]),t._v("："),a("code",[t._v("show engines;")]),t._v("可以查看得到;")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("引擎类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("InnoDB")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Supports transactions, row-level locking, and foreign keys")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("MyISAM")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("MyISAM storage engine")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("MEMORY")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Hash based, stored in memory, useful for temporary tables")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("------")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("-------")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("MRG_MYISAM")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("/dev/null storage engine (anything you write to it disappears)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("CSV")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("CSV storage engine")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("ARCHIVE")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Archive storage engine")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("PERFORMANCE_SCHEMA")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Performance Schema")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("FEDERATED")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Federated MySQL storage engine")])])])]),t._v(" "),a("h4",{attrs:{id:"命令查看"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令查看"}},[t._v("#")]),t._v(" 命令查看")]),t._v(" "),a("blockquote",[a("p",[t._v("查看出 MySQL 当前默认的存储引擎是InnoDB, 并且在5.7版本所有的存储引擎中默认是 InnoDB 是事务性存储引擎，也就是说 InnoDB 支持事务。")])]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("show")]),t._v(" engines"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//查看MySQL提供的所有存储引擎")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("show")]),t._v(" variables "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("like")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%storage_engine%'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//查看MySQL当前默认的存储引擎")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("show")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("status")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("like")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"users"')]),t._v(" \\G"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//查看表的存储引擎")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[a("code",[t._v("![](~/22-11-58.jpg)")])]),t._v(" "),a("h3",{attrs:{id:"myisam和innodb的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#myisam和innodb的区别"}},[t._v("#")]),t._v(" MyISAM和InnoDB的区别")]),t._v(" "),a("p",[t._v("MyISAM是MySQL的默认数据库引擎（"),a("code",[t._v("5.5版之前")]),t._v("）。虽然性能极佳，而且提供了大量的特性，包括全文索引、压缩、空间函数等，但"),a("strong",[t._v("MyISAM不支持事务和行级锁，而且最大的缺陷就是崩溃后无法安全恢复")]),t._v("。不过，5.5版本之后，MySQL引入了InnoDB（事务性数据库引擎），"),a("strong",[t._v("MySQL 5.5版本后默认的存储引擎为InnoDB")]),t._v("。")]),t._v(" "),a("p",[t._v("大多数时候我们使用的都是 InnoDB 存储引擎，但是"),a("strong",[t._v("在某些情况下使用 MyISAM 也是合适的比如读密集的情况下。（如果你不介意 MyISAM 崩溃回复问题的话）。")])]),t._v(" "),a("p",[t._v("同一个数据库也可以使用多种存储引擎的表。")]),t._v(" "),a("ul",[a("li",[t._v("如果一个表修改"),a("code",[t._v("要求比较高的事务处理")]),t._v("，可以选择InnoDB。")]),t._v(" "),a("li",[t._v("这个数据库中可以将"),a("code",[t._v("查询要求比较高")]),t._v("的表选择MyISAM存储。")]),t._v(" "),a("li",[t._v("如果该数据库需要一个"),a("code",[t._v("用于查询的临时表")]),t._v("，可以选择MEMORY存储引擎。")])]),t._v(" "),a("p",[a("strong",[t._v("两者的对比：")])]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("是否支持行级锁")]),t._v(" : MyISAM 只有表级锁(table-level locking)，而InnoDB 支持行级锁(row-level locking)和表级锁,默认为行级锁。")]),t._v(" "),a("li",[a("strong",[t._v("是否支持事务和崩溃后的安全恢复： MyISAM")]),t._v(" 强调的是性能，"),a("strong",[t._v("每次查询具有原子性,其执行数度比InnoDB类型更快，但是不提供事务支持")]),t._v("。但是"),a("strong",[t._v("InnoDB")]),t._v(" 提供事务支持事务，外部键等高级数据库功能。 具有事务(commit)、回滚(rollback)和崩溃修复能力(crash recovery capabilities)的事务安全(transaction-safe (ACID compliant))型表。")]),t._v(" "),a("li",[a("strong",[t._v("是否支持外键：")]),t._v(" MyISAM不支持，而InnoDB支持。")]),t._v(" "),a("li",[a("strong",[t._v("是否支持MVCC")]),t._v(" ：仅 InnoDB 支持。应对高并发事务, MVCC比单纯的加锁更高效; MVCC只在 "),a("code",[t._v("READ COMMITTED")]),t._v(" 和 "),a("code",[t._v("REPEATABLE READ")]),t._v(" 两个隔离级别下工作; MVCC可以使用 乐观(optimistic)锁 和 悲观(pessimistic)锁来实现; 各数据库中MVCC实现并不统一。")])]),t._v(" "),a("h4",{attrs:{id:"总括"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总括"}},[t._v("#")]),t._v(" 总括：")]),t._v(" "),a("ul",[a("li",[t._v("InnoDB支持事务，MyISAM不支持；")]),t._v(" "),a("li",[a("strong",[t._v("InnoDB数据存储在共享表空间，MyISAM数据存储在文件中")]),t._v("；")]),t._v(" "),a("li",[t._v("InnoDB支持行级锁，MyISAM只支持表锁；")]),t._v(" "),a("li",[t._v("InnoDB支持崩溃后的恢复，MyISAM不支持；")]),t._v(" "),a("li",[t._v("InnoDB支持外键，MyISAM不支持；")]),t._v(" "),a("li",[a("strong",[t._v("InnoDB不支持全文索引，MyISAM支持全文索引")]),t._v("；")])]),t._v(" "),a("h4",{attrs:{id:"详细比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#详细比较"}},[t._v("#")]),t._v(" 详细比较：")]),t._v(" "),a("p",[a("em",[a("strong",[t._v("1、InnoDB存储引擎，")])])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("默认事务型引擎，最重要最广泛的存储引擎")]),t._v("，性能非常优秀。")]),t._v(" "),a("li",[t._v("数据存储在共享表空间，可以通过配置分开。"),a("strong",[t._v("也就是多个表和索引都存储在一个表空间中，可以通过配置文件改变此配置。")])]),t._v(" "),a("li",[t._v("对主键查询的性能高于其他类型的存储引擎。")]),t._v(" "),a("li",[t._v("内部做了很多优化，"),a("strong",[t._v("从磁盘读取数据时会自动构建hash索引，插入数据时自动构建插入缓冲区")]),t._v("。")]),t._v(" "),a("li",[t._v("通过一些机制和工具"),a("strong",[t._v("支持真正的热备份")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("支持崩溃后的安全恢复")]),t._v("。")]),t._v(" "),a("li",[t._v("支持行级锁。")]),t._v(" "),a("li",[t._v("支持外键。")])]),t._v(" "),a("p",[a("em",[a("strong",[t._v("2、MyISAM存储引擎，")])])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("拥有全文索引、压缩、空间函数。")])]),t._v(" "),a("li",[t._v("不支持事务和行级锁、不支持崩溃后的安全恢复。")]),t._v(" "),a("li",[a("strong",[t._v("表存储在两个文件，MYD和MYI。")])]),t._v(" "),a("li",[t._v("设计简单，"),a("strong",[t._v("某些场景下性能很好，例如获取整个表有多少条数据，性能很高")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("全文索引不是很常用，不如使用外部的ElasticSearch或Lucene")]),t._v("。")])]),t._v(" "),a("p",[a("em",[a("strong",[t._v("innodb引擎的特性")])])]),t._v(" "),a("ul",[a("li",[t._v("插入缓冲（insert buffer)")]),t._v(" "),a("li",[t._v("二次写(double write)")]),t._v(" "),a("li",[t._v("自适应哈希索引(ahi)")]),t._v(" "),a("li",[t._v("预读(read ahead)")])]),t._v(" "),a("h2",{attrs:{id:"索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引"}},[t._v("#")]),t._v(" 索引")]),t._v(" "),a("h3",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),a("p",[a("strong",[t._v("索引是对数据库表中一个或多个列的值进行排序的数据结构，以协助快速查询、更新数据库表中数据。")])]),t._v(" "),a("p",[t._v("SQL的主流索引结构有"),a("code",[t._v("B+树")]),t._v("以及"),a("code",[t._v("Hash结构")]),t._v("，"),a("strong",[t._v("聚集索引以及非聚集索引用的是B+树索引")]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[t._v("SQL Sever索引类型有：唯一索引，主键索引，聚集索引，非聚集索引。\nMySQL 索引类型有：唯一索引，主键（聚集）索引，非聚集索引，全文索引。")])]),t._v(" "),a("h3",{attrs:{id:"索引的优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引的优缺点"}},[t._v("#")]),t._v(" 索引的优缺点")]),t._v(" "),a("p",[a("strong",[t._v("（1）优点：")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("大大加快数据的检索速度")]),t._v("，这也是创建索引的最主要的原因；")]),t._v(" "),a("li",[t._v("加速表和表之间的连接；")]),t._v(" "),a("li",[t._v("在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间；")]),t._v(" "),a("li",[t._v("通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性；")])]),t._v(" "),a("p",[a("strong",[t._v("（2）缺点：")])]),t._v(" "),a("ul",[a("li",[t._v("时间方面：创建索引和维护索引要耗费时间，具体地，当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度；")]),t._v(" "),a("li",[t._v("空间方面："),a("strong",[t._v("索引需要占物理空间")]),t._v("。")])]),t._v(" "),a("h3",{attrs:{id:"索引的分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引的分类"}},[t._v("#")]),t._v(" 索引的分类")]),t._v(" "),a("blockquote",[a("p",[t._v("一个表只能有一个主键索引，但是可以有多个唯一索引。\n"),a("strong",[t._v("主键索引")]),t._v("一定是"),a("strong",[t._v("唯一索引")]),t._v("，唯一索引不是主键索引。\n"),a("em",[t._v("主键可以与外键构成参照完整性约束，防止数据不一致。")])])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("主键索引")]),t._v("：为表定义一个主键将自动创建主键索引，"),a("strong",[t._v("主键索引是唯一索引的特殊类型")]),t._v("。主键索引"),a("code",[t._v("要求主键中的每个值是唯一的，并且不能为空;一个表只能有一个主键索引，但是可以有多个唯一索引")]),t._v("。不允许有空值。")]),t._v(" "),a("li",[a("strong",[t._v("唯一索引("),a("code",[t._v("unique")]),t._v(")")]),t._v("：唯一索引不允许两行具有相同的索引值;和普通索引类似，但是具有唯一性约束。")]),t._v(" "),a("li",[a("strong",[t._v("普通索引("),a("code",[t._v("normal")]),t._v(")")]),t._v("：最基本的索引，没有任何约束限制。")]),t._v(" "),a("li",[a("strong",[t._v("联合索引")]),t._v("：将多个列组合在一起创建索引，可以覆盖多个列。（也叫"),a("strong",[t._v("复合索引，组合索引")]),t._v("）")]),t._v(" "),a("li",[a("strong",[t._v("外键索引")]),t._v("：只有InnoDB类型的表才可以使用外键索引，保证数据的一致性、完整性、和实现级联操作（基本不用）。")]),t._v(" "),a("li",[a("strong",[t._v("全文索引("),a("code",[t._v("full text")]),t._v(")")]),t._v("：MySQL自带的全文索引只能用于MyISAM，并且只能对英文进行全文检索 （基本不用）")])]),t._v(" "),a("p",[a("strong",[t._v("聚集索引(Clustered)")]),t._v("：表中各行的物理顺序与键值的逻辑（索引）顺序相同，每个表只能有一个\n"),a("strong",[t._v("非聚集索引(Non-clustered)")]),t._v("：非聚集索引指定表的逻辑顺序。数据存储在一个位置，索引存储在另一个位置，索引中包含指向数据存储位置的指针。可以有多个，小于249个")]),t._v(" "),a("p",[t._v("示例：")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("table_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("column")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--1.添加PRIMARY KEY（主键索引）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("table_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNIQUE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("column")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--2.添加UNIQUE(唯一索引)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("table_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" index_name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("column")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--3.添加INDEX(普通索引)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("table_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" FULLTEXT "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("column")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--4.添加FULLTEXT(全文索引)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("table_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" index_name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("column1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("column2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("column3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--5.添加多列索引")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h4",{attrs:{id:"sql-约束有哪几种"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-约束有哪几种"}},[t._v("#")]),t._v(" SQL 约束有哪几种")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("5种")]),t._v("：主键，外键，非空，唯一约束，检查约束；")])]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("PRIMARY KEY")]),t._v(": 也是用于控件字段内容不能重复，但它在一个表只允许出现一个。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("FOREIGN KEY")]),t._v(": 用于预防破坏表之间连接的动作，也能防止非法数据插入外键列，因为它必须是它指向的那个表中的值之一。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("NOT NULL")]),t._v(": 用于控制字段的内容一定不能为空（NULL）。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("UNIQUE")]),t._v(": 控件字段内容不能重复，一个表允许有多个 Unique 约束。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("CHECK")]),t._v(": 用于控制字段的值范围。")])])]),t._v(" "),a("p",[a("strong",[t._v("主键ID，可以一列或多列，主键既是约束也是索引且是唯一索引，同时也用于对象缓存的键值。")])]),t._v(" "),a("h3",{attrs:{id:"索引的数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引的数据结构"}},[t._v("#")]),t._v(" 索引的数据结构")]),t._v(" "),a("blockquote",[a("p",[t._v("MyIASM和Innodb两种引擎所"),a("strong",[t._v("使用的索引的数据结构")]),t._v("都是"),a("code",[t._v("B+树")]),t._v("!")])]),t._v(" "),a("p",[a("strong",[t._v("使用B+树的原因：")]),t._v(" 查找速度快、效率高，在查找的过程中，每次都能抛弃掉一部分节点，减少遍历个数。")]),t._v(" "),a("p",[a("strong",[t._v("MyIASM引擎")]),t._v("，B+树的数据结构中存储的内容实际上是"),a("strong",[t._v("实际数据的地址值")]),t._v("。也就是说"),a("strong",[t._v("它的索引和实际数据是分开的，只不过使用索引指向了实际数据")]),t._v("。这种索引的模式被称为"),a("strong",[t._v("非聚集索引")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("Innodb引擎")]),t._v("的索引的数据结构也是B+树，"),a("strong",[t._v("只不过数据结构中存储的都是实际的数据")]),t._v("，这种索引有被称为"),a("strong",[t._v("聚集索引")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"聚集与非聚集索引的比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#聚集与非聚集索引的比较"}},[t._v("#")]),t._v(" 聚集与非聚集索引的比较")]),t._v(" "),a("p",[t._v("对于"),a("strong",[t._v("普通的堆组织")]),t._v("("),a("strong",[t._v("非聚集索引")]),t._v(")表来说，"),a("strong",[t._v("表数据和索引是分别存储的")]),t._v("，主键索引和二级索引存储上没有任何区别。\n而对于"),a("strong",[t._v("聚簇索引表")]),t._v("来说，"),a("strong",[t._v("表数据是和主键一起存储的")]),t._v("，"),a("code",[t._v("主键索引")]),t._v("的叶结点"),a("code",[t._v("存储行数据")]),t._v("，"),a("code",[t._v("二级索引")]),t._v("的叶结点"),a("code",[t._v("存储行的主键值")]),t._v("。\n"),a("strong",[t._v("聚簇索引表最大限度地提高了I/O密集型应用的性能")]),t._v("，但它也有以下几个限制：")]),t._v(" "),a("ul",[a("li",[t._v("1）插入速度严重依赖于插入顺序，按照主键的顺序插入是最快的方式，否则将会出现页分裂，严重影响性能。"),a("strong",[t._v("因此，对于InnoDB表，我们一般都会定义一个自增的ID列为主键")]),t._v("。")]),t._v(" "),a("li",[t._v("2）更新主键的代价很高，因为将会导致被更新的行移动。因此，对于InnoDB表，我们一般定义主键为不可更新。")]),t._v(" "),a("li",[t._v("3）二级索引访问需要两次索引查找，第一次找到主键值，第二次根据主键值找到行数据。")])]),t._v(" "),a("p",[a("strong",[t._v("二级索引的叶节点存储的是主键值，而不是行指针")]),t._v("，这是为了减少当出现行移动或数据页分裂时二级索引的维护工作，但会让二级索引占用更多的空间。")]),t._v(" "),a("h4",{attrs:{id:"myisam索引与innodb索引的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#myisam索引与innodb索引的区别"}},[t._v("#")]),t._v(" MyISAM索引与InnoDB索引的区别")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("InnoDB")]),t._v("索引是"),a("strong",[t._v("聚簇索引")]),t._v("，"),a("code",[t._v("MyISAM")]),t._v("索引是"),a("strong",[t._v("非聚簇索引")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("InnoDB")]),t._v("的"),a("strong",[t._v("主键索引")]),t._v("的"),a("strong",[t._v("叶子节点存储着行数据")]),t._v("，因此主键索引非常高效。")]),t._v(" "),a("li",[a("code",[t._v("MyISAM")]),t._v("索引的"),a("strong",[t._v("叶子节点存储的是行数据地址，需要再寻址一次才能得到数据")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("InnoDB")]),a("strong",[t._v("非主键索引的叶子节点存储的是主键和其他带索引的列数据")]),t._v("，因此查询时做到"),a("strong",[t._v("覆盖索引会非常高效")]),t._v("。")])]),t._v(" "),a("h3",{attrs:{id:"使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[t._v("#")]),t._v(" 使用场景")]),t._v(" "),a("ul",[a("li",[t._v("对于"),a("strong",[t._v("非常小的表")]),t._v("，大部分情况下"),a("strong",[t._v("全表扫描效率更高")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("中到大型表")]),t._v("，"),a("code",[t._v("索引非常有效")]),t._v("。//"),a("strong",[t._v("要点")])]),t._v(" "),a("li",[a("strong",[t._v("特大型的表")]),t._v("，建立和使用索引的代价会随之增大，可以使用"),a("strong",[t._v("分区技术")]),t._v("来解决。")])]),t._v(" "),a("blockquote",[a("h4",{attrs:{id:"【要】创建索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#【要】创建索引"}},[t._v("#")]),t._v(" 【要】创建索引")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("（1）表经常进行 SELECT 操作")])]),t._v(" "),a("li",[a("p",[t._v("（2）表很大(记录超多)，记录内容分布范围很广")])]),t._v(" "),a("li",[a("p",[t._v("（3）列名经常在 WHERE 子句或连接条件中出现")])]),t._v(" "),a("li",[a("blockquote",[a("h4",{attrs:{id:"适合创建索引的字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#适合创建索引的字段"}},[t._v("#")]),t._v(" 适合创建索引的字段")])]),t._v(" "),a("ul",[a("li",[t._v("经常作"),a("strong",[t._v("查询选择")]),t._v("的字段")]),t._v(" "),a("li",[t._v("经常作"),a("strong",[t._v("表连接")]),t._v("的字段")]),t._v(" "),a("li",[t._v("经常出现在"),a("code",[t._v("order by")]),t._v(", "),a("code",[t._v("group by")]),t._v(", "),a("code",[t._v("distinct")]),t._v(" 后面的字段")])])])]),t._v(" "),a("blockquote",[a("h4",{attrs:{id:"【不要】创建索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#【不要】创建索引"}},[t._v("#")]),t._v(" 【不要】创建索引")])]),t._v(" "),a("ul",[a("li",[t._v("（1）表经常进行 INSERT/UPDATE/DELETE 操作")]),t._v(" "),a("li",[t._v("（2）表很小(记录超少)")]),t._v(" "),a("li",[t._v("（3）列名不经常作为连接条件或出现在 WHERE 子句中")])]),t._v(" "),a("p",[a("code",[t._v("为了使索引的使用效率更高，在创建索引时")]),t._v("，"),a("strong",[t._v("必须考虑在哪些字段上创建索引和创建什么类型的索引,有7大原则")]),t._v("：")]),t._v(" "),a("p",[t._v("1．选择唯一性索引\n2．为经常需要排序、分组和联合操作的字段建立索引\n3．为常作为查询条件的字段建立索引\n4．限制索引的数目\n5．尽量使用数据量少的索引\n6．尽量使用前缀来索引\n7．删除不再使用或者很少使用的索引")]),t._v(" "),a("h3",{attrs:{id:"索引的注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引的注意事项"}},[t._v("#")]),t._v(" 索引的注意事项")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("非空字段")]),t._v("：应该指定列为NOT NULL，除非你想存储NULL。在mysql中，"),a("strong",[t._v("含有空值的列很难进行查询优化")]),t._v("，因为它们使得索引、索引的统计信息以及比较运算更加复杂。你应该用0、一个特殊的值或者一个空串代替空值； "),a("strong",[t._v("在MySQL里NULL值的列也是走索引的")]),t._v("。当然，如果计划对列进行索引，就要尽量避免把它设置为可空，"),a("strong",[t._v("MySQL难以优化引用了可空列的查询,它会使索引、索引统计和值更加复杂")]),t._v("。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("取值离散大的字段")]),t._v("：（变量各个取值之间的差异程度）的列放到联合索引的前面，可以通过count()函数查看字段的差异值，返回值越大说明字段的唯一值越多字段的离散程度高；")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("索引字段越小越好")]),t._v("：数据库的数据存储以页为单位一页存储的数据越多一次IO操作获取的数据越大效率越高。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("注意避免冗余索引")]),t._v(":  冗余索引指的是索引的功能相同，能够命中就肯定能命中 ，那么 就是冗余索引如（name,city ）和（name ）这两个索引就是冗余索引，能够命中后者的查询肯定是能够命中前者的 在大多数情况下，都应该尽量扩展已有的索引而不是创建新索引。")]),t._v(" "),a("p",[a("strong",[t._v("MySQLS.7 版本后，可以通过查询 sys 库的 "),a("code",[t._v("schema_redundant_indexes")]),t._v(" 表来查看冗余索引")])])]),t._v(" "),a("li",[a("p",[a("em",[a("strong",[t._v("创建MySQL联合索引应该注意, 需遵循前缀原则")])])])]),t._v(" "),a("li",[a("p",[t._v("1: LIKE查询，%不能在前")]),t._v(" "),a("p",[t._v("2: 如果关键词or前面的条件中的列有索引，后面的没有，"),a("strong",[t._v("所有列的索引都不会被用到")]),t._v("。")]),t._v(" "),a("p",[t._v("3: 列类型是字符串，查询时"),a("strong",[t._v("一定要给值加引号")]),t._v('，否则索引失效，例如：\n列name varchar(16)，存储了字符串"100"\nWHERE name = 100;以上SQL语句能搜到，但无法用到索引。')])])]),t._v(" "),a("h3",{attrs:{id:"问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[t._v("#")]),t._v(" 问题")]),t._v(" "),a("blockquote",[a("h4",{attrs:{id:"以下语句是否会应用索引-select-from-users-where-year-adddate-200"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#以下语句是否会应用索引-select-from-users-where-year-adddate-200"}},[t._v("#")]),t._v(" 以下语句是否会应用索引：SELECT* FROM users WHERE YEAR(adddate) < 200")])]),t._v(" "),a("p",[t._v("不会，因为"),a("strong",[t._v("只要列涉及到运算，MySQL就不会使用索引。")])]),t._v(" "),a("blockquote",[a("h4",{attrs:{id:"以下三条sql-如何建索引-只建一条怎么建-覆盖索引的示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#以下三条sql-如何建索引-只建一条怎么建-覆盖索引的示例"}},[t._v("#")]),t._v(" 以下三条sql 如何建索引，只建一条怎么建？  覆盖索引的示例")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("WHERE a=1 AND b=1\nWHERE b=1\nWHERE b=1 ORDER BY time DESC\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("以顺序b,a,time建立联合索引，"),a("code",[t._v("CREATE INDEX table1_b_a_time ON index_test01(b,a,time)")]),t._v("。因为最新MySQL版本会优化WHERE子句"),a("strong",[t._v("后面的列顺序，以匹配联合索引顺序")]),t._v("。")]),t._v(" "),a("blockquote",[a("h4",{attrs:{id:"数据表损坏的修复方式有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据表损坏的修复方式有哪些"}},[t._v("#")]),t._v(" 数据表损坏的修复方式有哪些？")])]),t._v(" "),a("p",[t._v("使用 "),a("strong",[t._v("myisamchk")]),t._v(" 来修复; 使用"),a("strong",[t._v("repair table")]),t._v(" 或者 "),a("strong",[t._v("OPTIMIZE table")]),t._v("命令来修复")]),t._v(" "),a("blockquote",[a("h4",{attrs:{id:"有a-id-sex-par-c1-c2-b-id-age-c1-c2-两张表-其中a-id与b-id关联-现在要求写出一条sql语句-将b中age-50的记录的c1-c2更新到a表中同一记录中的c1-c2字段中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有a-id-sex-par-c1-c2-b-id-age-c1-c2-两张表-其中a-id与b-id关联-现在要求写出一条sql语句-将b中age-50的记录的c1-c2更新到a表中同一记录中的c1-c2字段中"}},[t._v("#")]),t._v(" 有A(id,sex,par,c1,c2),B(id,age,c1,c2)两张表，其中A.id与B.id关联，现在要求写出一条SQL语句，将B中age>50的记录的c1,c2更新到A表中同一记录中的c1,c2字段中")])]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("B "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c2 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" A "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INNER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" B "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c2\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--再加上B中age>50的条件：要点；")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("B "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c2 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" A "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INNER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" B "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c2 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("blockquote",[a("h4",{attrs:{id:"为了记录足球比赛的结果-设计表如下-team-参赛队伍表-match-赛程表-其中-match赛程表中的hostteamid与guestteamid都和team表中的teamid关联-查询2006-6-1到2006-7-1之间举行的所有比赛-并且用以下形式列出-拜仁-2-0-不莱梅-2006-6-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为了记录足球比赛的结果-设计表如下-team-参赛队伍表-match-赛程表-其中-match赛程表中的hostteamid与guestteamid都和team表中的teamid关联-查询2006-6-1到2006-7-1之间举行的所有比赛-并且用以下形式列出-拜仁-2-0-不莱梅-2006-6-21"}},[t._v("#")]),t._v(" 为了记录足球比赛的结果，设计表如下：team：参赛队伍表;  match：赛程表;  其中，match赛程表中的hostTeamID与guestTeamID都和team表中的teamID关联，查询2006-6-1到2006-7-1之间举行的所有比赛，并且用以下形式列出：拜仁 2:0 不莱梅 2006-6-21")])]),t._v(" "),a("p",[a("strong",[t._v("首先列出需要查询的列：")])]),t._v(" "),a("ul",[a("li",[t._v("表team")]),t._v(" "),a("li",[t._v("teamID teamName")]),t._v(" "),a("li",[t._v("表match")]),t._v(" "),a("li",[t._v("match ID")]),t._v(" "),a("li",[t._v("hostTeamID")]),t._v(" "),a("li",[t._v("guestTeamID")]),t._v(" "),a("li",[t._v("matchTime matchResult")])]),t._v(" "),a("p",[a("strong",[t._v("其次列出结果列：")])]),t._v(" "),a("ul",[a("li",[t._v("主队 结果 客对 时间")])]),t._v(" "),a("p",[t._v("初步写一个基础的SQL：")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" hostTeamID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("matchResult"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("matchTime guestTeamID "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("match")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" matchTime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("between")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2006-6-1"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2006-7-1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("通过外键联表，完成最终SQL：")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("teamName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("matchResult"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("t2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("teamName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("matchTime "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("match")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" m "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" team "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" t1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hostTeamID "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("teamID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" team t2 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("guestTeamID"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("t2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("teamID "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("matchTime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("between")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2006-6-1"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2006-7-1"')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("blockquote",[a("h4",{attrs:{id:"一个6亿的表a-一个3亿的表b-通过外键tid关联-你如何最快的查询出满足条件的第50000到第50200中的这200条数据记录。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个6亿的表a-一个3亿的表b-通过外键tid关联-你如何最快的查询出满足条件的第50000到第50200中的这200条数据记录。"}},[t._v("#")]),t._v(" 一个6亿的表a，一个3亿的表b，通过外键tid关联，你如何最快的查询出满足条件的第50000到第50200中的这200条数据记录。")])]),t._v(" "),a("ul",[a("li",[t._v("1、如果A表TID是自增长,并且是连续的,B表的ID为索引")])]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tid"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ul",[a("li",[t._v("2、如果A表的TID不是连续的,那么就需要使用覆盖索引.TID要么是主键,要么是辅助索引,B表ID也需要有索引。")])]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" tid "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("blockquote",[a("h4",{attrs:{id:"拷贝表-拷贝数据-源表名-a-目标表名-b"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拷贝表-拷贝数据-源表名-a-目标表名-b"}},[t._v("#")]),t._v(" 拷贝表( 拷贝数据, 源表名：a 目标表名：b)")])]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("f "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 嵌套查询操作；")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("blockquote",[a("h4",{attrs:{id:"student-s-sname-sage-ssex-学生表-course-c-cname-t-课程表-sc-s-c-score-成绩表-teacher-t-tname-教师表-查询没学过-samy-老师课的同学的学号、姓名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#student-s-sname-sage-ssex-学生表-course-c-cname-t-课程表-sc-s-c-score-成绩表-teacher-t-tname-教师表-查询没学过-samy-老师课的同学的学号、姓名"}},[t._v("#")]),t._v(" Student(S#,Sname,Sage,Ssex) 学生表 Course(C#,Cname,T#) 课程表 SC(S#,C#,score) 成绩表 Teacher(T#,Tname) 教师表 查询没学过“samy”老师课的同学的学号、姓名")])]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" Student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("S"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#,Student.Snamefrom Studentwhere S# not in (select distinct( SC.S#) from SC,Course,Teacher where SC.C#=Course.C# and Teacher.T#=Course.T# and Teacher.Tname=’samy’);")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("blockquote",[a("h4",{attrs:{id:"随机取出10条数据-控制id在-max-min-rand-min"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#随机取出10条数据-控制id在-max-min-rand-min"}},[t._v("#")]),t._v(" "),a("strong",[t._v("随机取出10条数据")]),t._v(" 控制id在（max-min）*Rand() + min")])]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" users "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MAX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MIN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" RAND"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MIN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LIMIT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("strong",[t._v("此方法效率比直接用SELECT * FROM users order by rand() LIMIT 10高很多")])])])}),[],!1,null,null,null);s.default=e.exports}}]);