(window.webpackJsonp=window.webpackJsonp||[]).push([[517],{2275:function(t,e,o){"use strict";o.r(e);var s=o(14),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h3",{attrs:{id:"网络安全"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#网络安全"}},[t._v("#")]),t._v(" 网络安全")]),t._v(" "),o("p",[t._v("xss: 往Web页面插件恶意的Script代码，当用户浏览该页之时，嵌入其中 Web 里面的 Script 代码会被执行，从而达到恶意攻击用户的目的。")]),t._v(" "),o("p",[t._v("解决：现在在成熟的框架已经解决了 HttpOnly 防止劫取 Cookie 用户的输入检查 服务端的输出检查")]),t._v(" "),o("p",[t._v("csrf：CSRF 攻击是攻击者借助受害者的 Cookie 骗取服务器的信任，可以在受害者毫不知情的情况下以受害者名义伪造请求发送给受攻击服务器，从而在并未授权的情况下执行在权限保护之下的操作。")]),t._v(" "),o("p",[t._v("解决：CSRF的两个特点：")]),t._v(" "),o("p",[t._v("CSRF（通常）发生在第三方域名。 CSRF攻击者不能获取到Cookie等信息，只是使用。 针对这两点，我们可以专门制定防护策略，如下：")]),t._v(" "),o("p",[t._v("阻止不明外域的访问 同源检测 Samesite Cookie 提交时要求附加本域才能获取的信息 CSRF Token 双重Cookie验证")])])}),[],!1,null,null,null);e.default=r.exports}}]);